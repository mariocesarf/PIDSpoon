
teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004214  08004214  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004214  08004214  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004214  08004214  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800421c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000070  0800428c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800428c  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000badc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b88  00000000  00000000  0002bb75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  0002d700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  0002e370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ae4  00000000  00000000  0002eef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c9a  00000000  00000000  000469dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bc4b  00000000  00000000  00050676  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc2c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b0  00000000  00000000  000dc33c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004174 	.word	0x08004174

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004174 	.word	0x08004174

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b093      	sub	sp, #76	; 0x4c
 800065c:	af00      	add	r7, sp, #0
int main(void)
 800065e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000662:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 fc38 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f8ee 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 fa42 	bl	8000af4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000670:	f000 f97e 	bl	8000970 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000674:	f000 f93e 	bl	80008f4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000678:	f000 fa12 	bl	8000aa0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800067c:	2100      	movs	r1, #0
 800067e:	486c      	ldr	r0, [pc, #432]	; (8000830 <main+0x1d8>)
 8000680:	f002 f932 	bl	80028e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000684:	2104      	movs	r1, #4
 8000686:	486a      	ldr	r0, [pc, #424]	; (8000830 <main+0x1d8>)
 8000688:	f002 f92e 	bl	80028e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800068c:	2108      	movs	r1, #8
 800068e:	4868      	ldr	r0, [pc, #416]	; (8000830 <main+0x1d8>)
 8000690:	f002 f92a 	bl	80028e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000694:	210c      	movs	r1, #12
 8000696:	4866      	ldr	r0, [pc, #408]	; (8000830 <main+0x1d8>)
 8000698:	f002 f926 	bl	80028e8 <HAL_TIM_PWM_Start>

  }


  uint16_t adcval;
  uint16_t numReadings = 3;
 800069c:	2303      	movs	r3, #3
 800069e:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t readings[numReadings];
 80006a0:	8f78      	ldrh	r0, [r7, #58]	; 0x3a
 80006a2:	4603      	mov	r3, r0
 80006a4:	3b01      	subs	r3, #1
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
 80006a8:	b281      	uxth	r1, r0
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	f04f 0300 	mov.w	r3, #0
 80006b2:	f04f 0400 	mov.w	r4, #0
 80006b6:	0114      	lsls	r4, r2, #4
 80006b8:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80006bc:	010b      	lsls	r3, r1, #4
 80006be:	b281      	uxth	r1, r0
 80006c0:	f04f 0200 	mov.w	r2, #0
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	f04f 0400 	mov.w	r4, #0
 80006cc:	0114      	lsls	r4, r2, #4
 80006ce:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80006d2:	010b      	lsls	r3, r1, #4
 80006d4:	4603      	mov	r3, r0
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	3301      	adds	r3, #1
 80006da:	3307      	adds	r3, #7
 80006dc:	08db      	lsrs	r3, r3, #3
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	ebad 0d03 	sub.w	sp, sp, r3
 80006e4:	466b      	mov	r3, sp
 80006e6:	3301      	adds	r3, #1
 80006e8:	085b      	lsrs	r3, r3, #1
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	633b      	str	r3, [r7, #48]	; 0x30
  uint16_t readIndex = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t total = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t value = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t pwmval = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  int average = 0, error = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  float kp = 1, kd = 3,lasterror = 0;
 8000706:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800070a:	61fb      	str	r3, [r7, #28]
 800070c:	4b49      	ldr	r3, [pc, #292]	; (8000834 <main+0x1dc>)
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	f04f 0300 	mov.w	r3, #0
 8000714:	643b      	str	r3, [r7, #64]	; 0x40
  for (uint16_t thisReading = 0; thisReading < numReadings; thisReading++) {
 8000716:	2300      	movs	r3, #0
 8000718:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800071c:	e00a      	b.n	8000734 <main+0xdc>
  readings[thisReading] = 0;
 800071e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (uint16_t thisReading = 0; thisReading < numReadings; thisReading++) {
 800072a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800072e:	3301      	adds	r3, #1
 8000730:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000734:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000738:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800073a:	429a      	cmp	r2, r3
 800073c:	d3ef      	bcc.n	800071e <main+0xc6>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  total = total - readings[readIndex];
 800073e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000742:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000746:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  HAL_ADC_Start(&hadc1);
 800074c:	483a      	ldr	r0, [pc, #232]	; (8000838 <main+0x1e0>)
 800074e:	f000 fcfd 	bl	800114c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000752:	f04f 31ff 	mov.w	r1, #4294967295
 8000756:	4838      	ldr	r0, [pc, #224]	; (8000838 <main+0x1e0>)
 8000758:	f000 fda6 	bl	80012a8 <HAL_ADC_PollForConversion>
	  adcval = HAL_ADC_GetValue(&hadc1);
 800075c:	4836      	ldr	r0, [pc, #216]	; (8000838 <main+0x1e0>)
 800075e:	f000 fe9d 	bl	800149c <HAL_ADC_GetValue>
 8000762:	4603      	mov	r3, r0
 8000764:	82fb      	strh	r3, [r7, #22]
	  readings[readIndex] = adcval;
 8000766:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076a:	8af9      	ldrh	r1, [r7, #22]
 800076c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  total = total + readings[readIndex];
 8000770:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000774:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000778:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800077a:	4413      	add	r3, r2
 800077c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  readIndex = readIndex + 1;
 800077e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000780:	3301      	adds	r3, #1
 8000782:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  if (readIndex >= numReadings) {
 8000784:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000786:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000788:	429a      	cmp	r2, r3
 800078a:	d301      	bcc.n	8000790 <main+0x138>
	    readIndex = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  }
	  average = total / numReadings;
 8000790:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000792:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000794:	fbb2 f3f3 	udiv	r3, r2, r3
 8000798:	b29b      	uxth	r3, r3
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
	  error = average - 1340;
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 80007a2:	623b      	str	r3, [r7, #32]
	  value = error*kp + (error-lasterror)*kd;
 80007a4:	6a38      	ldr	r0, [r7, #32]
 80007a6:	f7ff fd93 	bl	80002d0 <__aeabi_i2f>
 80007aa:	4603      	mov	r3, r0
 80007ac:	69f9      	ldr	r1, [r7, #28]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fde2 	bl	8000378 <__aeabi_fmul>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461c      	mov	r4, r3
 80007b8:	6a38      	ldr	r0, [r7, #32]
 80007ba:	f7ff fd89 	bl	80002d0 <__aeabi_i2f>
 80007be:	4603      	mov	r3, r0
 80007c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fcce 	bl	8000164 <__aeabi_fsub>
 80007c8:	4603      	mov	r3, r0
 80007ca:	69b9      	ldr	r1, [r7, #24]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fdd3 	bl	8000378 <__aeabi_fmul>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4619      	mov	r1, r3
 80007d6:	4620      	mov	r0, r4
 80007d8:	f7ff fcc6 	bl	8000168 <__addsf3>
 80007dc:	4603      	mov	r3, r0
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff1a 	bl	8000618 <__aeabi_f2uiz>
 80007e4:	4603      	mov	r3, r0
 80007e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  pwmval = value*(2703/1000);
 80007e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
	  sprintf(msg,"Valor do PWM: %d \r\n", pwmval);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f2:	4912      	ldr	r1, [pc, #72]	; (800083c <main+0x1e4>)
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 f8ab 	bl	8003950 <siprintf>

	  HAL_UART_Transmit(&huart1,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fca5 	bl	800014c <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	b29a      	uxth	r2, r3
 8000806:	1d39      	adds	r1, r7, #4
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <main+0x1e8>)
 800080e:	f002 ff02 	bl	8003616 <HAL_UART_Transmit>
	  if(pwmval < 999){
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000818:	4293      	cmp	r3, r2
 800081a:	d802      	bhi.n	8000822 <main+0x1ca>
	  TIM3->CCR2 = pwmval;
 800081c:	4a09      	ldr	r2, [pc, #36]	; (8000844 <main+0x1ec>)
 800081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000820:	6393      	str	r3, [r2, #56]	; 0x38
	  }

	  lasterror = error;
 8000822:	6a38      	ldr	r0, [r7, #32]
 8000824:	f7ff fd54 	bl	80002d0 <__aeabi_i2f>
 8000828:	4603      	mov	r3, r0
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  {
 800082c:	e787      	b.n	800073e <main+0xe6>
 800082e:	bf00      	nop
 8000830:	20000098 	.word	0x20000098
 8000834:	40400000 	.word	0x40400000
 8000838:	200000e0 	.word	0x200000e0
 800083c:	0800418c 	.word	0x0800418c
 8000840:	20000110 	.word	0x20000110
 8000844:	40000400 	.word	0x40000400

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000852:	2228      	movs	r2, #40	; 0x28
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f003 f872 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000878:	2302      	movs	r3, #2
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000880:	2310      	movs	r3, #16
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000888:	2300      	movs	r3, #0
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800088c:	2300      	movs	r3, #0
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000894:	4618      	mov	r0, r3
 8000896:	f001 f9f1 	bl	8001c7c <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008a0:	f000 f956 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fc5b 	bl	800217c <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008cc:	f000 f940 	bl	8000b50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008d0:	2302      	movs	r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fdea 	bl	80024b4 <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008e6:	f000 f933 	bl	8000b50 <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	; 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_ADC1_Init+0x74>)
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <MX_ADC1_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ADC1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_ADC1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_ADC1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_ADC1_Init+0x74>)
 800091e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000922:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_ADC1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_ADC1_Init+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_ADC1_Init+0x74>)
 8000932:	f000 fb33 	bl	8000f9c <HAL_ADC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 f908 	bl	8000b50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000944:	2301      	movs	r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_ADC1_Init+0x74>)
 8000952:	f000 fdaf 	bl	80014b4 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800095c:	f000 f8f8 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000e0 	.word	0x200000e0
 800096c:	40012400 	.word	0x40012400

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	; 0x38
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
 800099c:	615a      	str	r2, [r3, #20]
 800099e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a0:	4b3d      	ldr	r3, [pc, #244]	; (8000a98 <MX_TIM3_Init+0x128>)
 80009a2:	4a3e      	ldr	r2, [pc, #248]	; (8000a9c <MX_TIM3_Init+0x12c>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 80009a6:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <MX_TIM3_Init+0x128>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b3a      	ldr	r3, [pc, #232]	; (8000a98 <MX_TIM3_Init+0x128>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009b2:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <MX_TIM3_Init+0x128>)
 80009b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b37      	ldr	r3, [pc, #220]	; (8000a98 <MX_TIM3_Init+0x128>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c0:	4b35      	ldr	r3, [pc, #212]	; (8000a98 <MX_TIM3_Init+0x128>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009c6:	4834      	ldr	r0, [pc, #208]	; (8000a98 <MX_TIM3_Init+0x128>)
 80009c8:	f001 fee6 	bl	8002798 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009d2:	f000 f8bd 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e0:	4619      	mov	r1, r3
 80009e2:	482d      	ldr	r0, [pc, #180]	; (8000a98 <MX_TIM3_Init+0x128>)
 80009e4:	f002 f9e2 	bl	8002dac <HAL_TIM_ConfigClockSource>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009ee:	f000 f8af 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009f2:	4829      	ldr	r0, [pc, #164]	; (8000a98 <MX_TIM3_Init+0x128>)
 80009f4:	f001 ff1f 	bl	8002836 <HAL_TIM_PWM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009fe:	f000 f8a7 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4821      	ldr	r0, [pc, #132]	; (8000a98 <MX_TIM3_Init+0x128>)
 8000a12:	f002 fd49 	bl	80034a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a1c:	f000 f898 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a20:	2360      	movs	r3, #96	; 0x60
 8000a22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4818      	ldr	r0, [pc, #96]	; (8000a98 <MX_TIM3_Init+0x128>)
 8000a38:	f002 f8fa 	bl	8002c30 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a42:	f000 f885 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2204      	movs	r2, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4812      	ldr	r0, [pc, #72]	; (8000a98 <MX_TIM3_Init+0x128>)
 8000a4e:	f002 f8ef 	bl	8002c30 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000a58:	f000 f87a 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2208      	movs	r2, #8
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_TIM3_Init+0x128>)
 8000a64:	f002 f8e4 	bl	8002c30 <HAL_TIM_PWM_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000a6e:	f000 f86f 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	220c      	movs	r2, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <MX_TIM3_Init+0x128>)
 8000a7a:	f002 f8d9 	bl	8002c30 <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000a84:	f000 f864 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <MX_TIM3_Init+0x128>)
 8000a8a:	f000 f8f9 	bl	8000c80 <HAL_TIM_MspPostInit>

}
 8000a8e:	bf00      	nop
 8000a90:	3738      	adds	r7, #56	; 0x38
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000098 	.word	0x20000098
 8000a9c:	40000400 	.word	0x40000400

08000aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART1_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ad8:	f002 fd50 	bl	800357c <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f835 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000110 	.word	0x20000110
 8000af0:	40013800 	.word	0x40013800

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_GPIO_Init+0x58>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <MX_GPIO_Init+0x58>)
 8000b00:	f043 0320 	orr.w	r3, r3, #32
 8000b04:	6193      	str	r3, [r2, #24]
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_GPIO_Init+0x58>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f003 0320 	and.w	r3, r3, #32
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_GPIO_Init+0x58>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <MX_GPIO_Init+0x58>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_GPIO_Init+0x58>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_GPIO_Init+0x58>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <MX_GPIO_Init+0x58>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <MX_GPIO_Init+0x58>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <Error_Handler+0x6>

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x60>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_MspInit+0x60>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000

08000bbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_ADC_MspInit+0x6c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d121      	bne.n	8000c20 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_ADC_MspInit+0x70>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_ADC_MspInit+0x74>)
 8000c1c:	f000 fedc 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40012400 	.word	0x40012400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800

08000c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <HAL_TIM_Base_MspInit+0x44>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d113      	bne.n	8000c6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_TIM_Base_MspInit+0x48>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <HAL_TIM_Base_MspInit+0x48>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_TIM_Base_MspInit+0x48>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	201d      	movs	r0, #29
 8000c64:	f000 fe81 	bl	800196a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c68:	201d      	movs	r0, #29
 8000c6a:	f000 fe9a 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40000400 	.word	0x40000400
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <HAL_TIM_MspPostInit+0x88>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d12f      	bne.n	8000d00 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_TIM_MspPostInit+0x8c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_TIM_MspPostInit+0x8c>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_TIM_MspPostInit+0x8c>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_TIM_MspPostInit+0x8c>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_TIM_MspPostInit+0x8c>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_TIM_MspPostInit+0x8c>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd0:	23c0      	movs	r3, #192	; 0xc0
 8000cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_TIM_MspPostInit+0x90>)
 8000ce4:	f000 fe78 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_TIM_MspPostInit+0x94>)
 8000cfc:	f000 fe6c 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40000400 	.word	0x40000400
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40010c00 	.word	0x40010c00

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <HAL_UART_MspInit+0x8c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d131      	bne.n	8000d9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a1a      	ldr	r2, [pc, #104]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <HAL_UART_MspInit+0x94>)
 8000d7e:	f000 fe2b 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_UART_MspInit+0x94>)
 8000d98:	f000 fe1e 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40013800 	.word	0x40013800
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010800 	.word	0x40010800

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df6:	f000 f8b5 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <TIM3_IRQHandler+0x10>)
 8000e06:	f001 fe0b 	bl	8002a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000098 	.word	0x20000098

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f002 fd52 	bl	80038ec <__errno>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20002800 	.word	0x20002800
 8000e74:	00000400 	.word	0x00000400
 8000e78:	2000008c 	.word	0x2000008c
 8000e7c:	20000158 	.word	0x20000158

08000e80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e8e:	e003      	b.n	8000e98 <LoopCopyDataInit>

08000e90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e96:	3104      	adds	r1, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e98:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ea0:	d3f6      	bcc.n	8000e90 <CopyDataInit>
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ea4:	e002      	b.n	8000eac <LoopFillZerobss>

08000ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ea8:	f842 3b04 	str.w	r3, [r2], #4

08000eac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000eae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000eb0:	d3f9      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eb2:	f7ff ffe5 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 fd1f 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff fbcd 	bl	8000658 <main>
  bx lr
 8000ebe:	4770      	bx	lr
  ldr r3, =_sidata
 8000ec0:	0800421c 	.word	0x0800421c
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ec8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ecc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000ed0:	20000158 	.word	0x20000158

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x28>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 fd33 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fe30 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fd4b 	bl	80019be <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 fd13 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_IncTick+0x1c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x20>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <HAL_IncTick+0x20>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000150 	.word	0x20000150

08000f88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <HAL_GetTick+0x10>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000150 	.word	0x20000150

08000f9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e0be      	b.n	800113c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d109      	bne.n	8000fe0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fdee 	bl	8000bbc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fbb1 	bl	8001748 <ADC_ConversionStop_Disable>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f040 8099 	bne.w	800112a <HAL_ADC_Init+0x18e>
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 8095 	bne.w	800112a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001008:	f023 0302 	bic.w	r3, r3, #2
 800100c:	f043 0202 	orr.w	r2, r3, #2
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800101c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7b1b      	ldrb	r3, [r3, #12]
 8001022:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001024:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	4313      	orrs	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001034:	d003      	beq.n	800103e <HAL_ADC_Init+0xa2>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d102      	bne.n	8001044 <HAL_ADC_Init+0xa8>
 800103e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001042:	e000      	b.n	8001046 <HAL_ADC_Init+0xaa>
 8001044:	2300      	movs	r3, #0
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7d1b      	ldrb	r3, [r3, #20]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d119      	bne.n	8001088 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7b1b      	ldrb	r3, [r3, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	3b01      	subs	r3, #1
 8001062:	035a      	lsls	r2, r3, #13
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	e00b      	b.n	8001088 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	f043 0220 	orr.w	r2, r3, #32
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	f043 0201 	orr.w	r2, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	430a      	orrs	r2, r1
 800109a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_ADC_Init+0x1a8>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010b8:	d003      	beq.n	80010c2 <HAL_ADC_Init+0x126>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d104      	bne.n	80010cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	051b      	lsls	r3, r3, #20
 80010ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	430a      	orrs	r2, r1
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_ADC_Init+0x1ac>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d10b      	bne.n	8001108 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	f023 0303 	bic.w	r3, r3, #3
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001106:	e018      	b.n	800113a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	f023 0312 	bic.w	r3, r3, #18
 8001110:	f043 0210 	orr.w	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001128:	e007      	b.n	800113a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	f043 0210 	orr.w	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800113a:	7dfb      	ldrb	r3, [r7, #23]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	ffe1f7fd 	.word	0xffe1f7fd
 8001148:	ff1f0efe 	.word	0xff1f0efe

0800114c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800115e:	2b01      	cmp	r3, #1
 8001160:	d101      	bne.n	8001166 <HAL_ADC_Start+0x1a>
 8001162:	2302      	movs	r3, #2
 8001164:	e098      	b.n	8001298 <HAL_ADC_Start+0x14c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fa98 	bl	80016a4 <ADC_Enable>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f040 8087 	bne.w	800128e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a41      	ldr	r2, [pc, #260]	; (80012a0 <HAL_ADC_Start+0x154>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d105      	bne.n	80011aa <HAL_ADC_Start+0x5e>
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <HAL_ADC_Start+0x158>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d115      	bne.n	80011d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d026      	beq.n	8001212 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d4:	e01d      	b.n	8001212 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <HAL_ADC_Start+0x158>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d004      	beq.n	80011f6 <HAL_ADC_Start+0xaa>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a2b      	ldr	r2, [pc, #172]	; (80012a0 <HAL_ADC_Start+0x154>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10d      	bne.n	8001212 <HAL_ADC_Start+0xc6>
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <HAL_ADC_Start+0x158>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800120a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	f023 0206 	bic.w	r2, r3, #6
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	62da      	str	r2, [r3, #44]	; 0x2c
 800122a:	e002      	b.n	8001232 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f06f 0202 	mvn.w	r2, #2
 8001242:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800124e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001252:	d113      	bne.n	800127c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_ADC_Start+0x154>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d105      	bne.n	800126a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_ADC_Start+0x158>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001266:	2b00      	cmp	r3, #0
 8001268:	d108      	bne.n	800127c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	e00c      	b.n	8001296 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e003      	b.n	8001296 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40012800 	.word	0x40012800
 80012a4:	40012400 	.word	0x40012400

080012a8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80012be:	f7ff fe63 	bl	8000f88 <HAL_GetTick>
 80012c2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00b      	beq.n	80012ea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	f043 0220 	orr.w	r2, r3, #32
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0c8      	b.n	800147c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12a      	bne.n	800134e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001302:	2b00      	cmp	r3, #0
 8001304:	d123      	bne.n	800134e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001306:	e01a      	b.n	800133e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130e:	d016      	beq.n	800133e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <HAL_ADC_PollForConversion+0x7e>
 8001316:	f7ff fe37 	bl	8000f88 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d20b      	bcs.n	800133e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f043 0204 	orr.w	r2, r3, #4
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e09e      	b.n	800147c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0dd      	beq.n	8001308 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800134c:	e06c      	b.n	8001428 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800134e:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_ADC_PollForConversion+0x1dc>)
 8001350:	681c      	ldr	r4, [r3, #0]
 8001352:	2002      	movs	r0, #2
 8001354:	f001 f964 	bl	8002620 <HAL_RCCEx_GetPeriphCLKFreq>
 8001358:	4603      	mov	r3, r0
 800135a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6919      	ldr	r1, [r3, #16]
 8001364:	4b48      	ldr	r3, [pc, #288]	; (8001488 <HAL_ADC_PollForConversion+0x1e0>)
 8001366:	400b      	ands	r3, r1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d118      	bne.n	800139e <HAL_ADC_PollForConversion+0xf6>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68d9      	ldr	r1, [r3, #12]
 8001372:	4b46      	ldr	r3, [pc, #280]	; (800148c <HAL_ADC_PollForConversion+0x1e4>)
 8001374:	400b      	ands	r3, r1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d111      	bne.n	800139e <HAL_ADC_PollForConversion+0xf6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6919      	ldr	r1, [r3, #16]
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <HAL_ADC_PollForConversion+0x1e8>)
 8001382:	400b      	ands	r3, r1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d108      	bne.n	800139a <HAL_ADC_PollForConversion+0xf2>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68d9      	ldr	r1, [r3, #12]
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_ADC_PollForConversion+0x1ec>)
 8001390:	400b      	ands	r3, r1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_ADC_PollForConversion+0xf2>
 8001396:	2314      	movs	r3, #20
 8001398:	e020      	b.n	80013dc <HAL_ADC_PollForConversion+0x134>
 800139a:	2329      	movs	r3, #41	; 0x29
 800139c:	e01e      	b.n	80013dc <HAL_ADC_PollForConversion+0x134>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6919      	ldr	r1, [r3, #16]
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_ADC_PollForConversion+0x1e8>)
 80013a6:	400b      	ands	r3, r1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d106      	bne.n	80013ba <HAL_ADC_PollForConversion+0x112>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68d9      	ldr	r1, [r3, #12]
 80013b2:	4b38      	ldr	r3, [pc, #224]	; (8001494 <HAL_ADC_PollForConversion+0x1ec>)
 80013b4:	400b      	ands	r3, r1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00d      	beq.n	80013d6 <HAL_ADC_PollForConversion+0x12e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6919      	ldr	r1, [r3, #16]
 80013c0:	4b35      	ldr	r3, [pc, #212]	; (8001498 <HAL_ADC_PollForConversion+0x1f0>)
 80013c2:	400b      	ands	r3, r1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d108      	bne.n	80013da <HAL_ADC_PollForConversion+0x132>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68d9      	ldr	r1, [r3, #12]
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <HAL_ADC_PollForConversion+0x1f0>)
 80013d0:	400b      	ands	r3, r1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_PollForConversion+0x132>
 80013d6:	2354      	movs	r3, #84	; 0x54
 80013d8:	e000      	b.n	80013dc <HAL_ADC_PollForConversion+0x134>
 80013da:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013e2:	e01d      	b.n	8001420 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ea:	d016      	beq.n	800141a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_ADC_PollForConversion+0x15a>
 80013f2:	f7ff fdc9 	bl	8000f88 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d20b      	bcs.n	800141a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	f043 0204 	orr.w	r2, r3, #4
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e030      	b.n	800147c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8dd      	bhi.n	80013e4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f06f 0212 	mvn.w	r2, #18
 8001430:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001448:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800144c:	d115      	bne.n	800147a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001452:	2b00      	cmp	r3, #0
 8001454:	d111      	bne.n	800147a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d105      	bne.n	800147a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	20000000 	.word	0x20000000
 8001488:	24924924 	.word	0x24924924
 800148c:	00924924 	.word	0x00924924
 8001490:	12492492 	.word	0x12492492
 8001494:	00492492 	.word	0x00492492
 8001498:	00249249 	.word	0x00249249

0800149c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x20>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e0dc      	b.n	800168e <HAL_ADC_ConfigChannel+0x1da>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b06      	cmp	r3, #6
 80014e2:	d81c      	bhi.n	800151e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b05      	subs	r3, #5
 80014f6:	221f      	movs	r2, #31
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4019      	ands	r1, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	3b05      	subs	r3, #5
 8001510:	fa00 f203 	lsl.w	r2, r0, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
 800151c:	e03c      	b.n	8001598 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b0c      	cmp	r3, #12
 8001524:	d81c      	bhi.n	8001560 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b23      	subs	r3, #35	; 0x23
 8001538:	221f      	movs	r2, #31
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	4019      	ands	r1, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	3b23      	subs	r3, #35	; 0x23
 8001552:	fa00 f203 	lsl.w	r2, r0, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
 800155e:	e01b      	b.n	8001598 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b41      	subs	r3, #65	; 0x41
 8001572:	221f      	movs	r2, #31
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	4019      	ands	r1, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	3b41      	subs	r3, #65	; 0x41
 800158c:	fa00 f203 	lsl.w	r2, r0, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b09      	cmp	r3, #9
 800159e:	d91c      	bls.n	80015da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68d9      	ldr	r1, [r3, #12]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	3b1e      	subs	r3, #30
 80015b2:	2207      	movs	r2, #7
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4019      	ands	r1, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6898      	ldr	r0, [r3, #8]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	3b1e      	subs	r3, #30
 80015cc:	fa00 f203 	lsl.w	r2, r0, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	e019      	b.n	800160e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6919      	ldr	r1, [r3, #16]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	2207      	movs	r2, #7
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4019      	ands	r1, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6898      	ldr	r0, [r3, #8]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	fa00 f203 	lsl.w	r2, r0, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b10      	cmp	r3, #16
 8001614:	d003      	beq.n	800161e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800161a:	2b11      	cmp	r3, #17
 800161c:	d132      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_ADC_ConfigChannel+0x1e4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d125      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d126      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001644:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b10      	cmp	r3, #16
 800164c:	d11a      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_ADC_ConfigChannel+0x1e8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	0c9a      	lsrs	r2, r3, #18
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001664:	e002      	b.n	800166c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3b01      	subs	r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f9      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x1b2>
 8001672:	e007      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f043 0220 	orr.w	r2, r3, #32
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	40012400 	.word	0x40012400
 800169c:	20000000 	.word	0x20000000
 80016a0:	431bde83 	.word	0x431bde83

080016a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d039      	beq.n	8001736 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0201 	orr.w	r2, r2, #1
 80016d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <ADC_Enable+0x9c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <ADC_Enable+0xa0>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9b      	lsrs	r3, r3, #18
 80016de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016e0:	e002      	b.n	80016e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f9      	bne.n	80016e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ee:	f7ff fc4b 	bl	8000f88 <HAL_GetTick>
 80016f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016f4:	e018      	b.n	8001728 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016f6:	f7ff fc47 	bl	8000f88 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d911      	bls.n	8001728 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e007      	b.n	8001738 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d1df      	bne.n	80016f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	431bde83 	.word	0x431bde83

08001748 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d127      	bne.n	80017b2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0201 	bic.w	r2, r2, #1
 8001770:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001772:	f7ff fc09 	bl	8000f88 <HAL_GetTick>
 8001776:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001778:	e014      	b.n	80017a4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800177a:	f7ff fc05 	bl	8000f88 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d90d      	bls.n	80017a4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f043 0210 	orr.w	r2, r3, #16
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e007      	b.n	80017b4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d0e3      	beq.n	800177a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4906      	ldr	r1, [pc, #24]	; (8001854 <__NVIC_EnableIRQ+0x34>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff90 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff2d 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff42 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff35 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa2 	bl	8001910 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b08b      	sub	sp, #44	; 0x2c
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ea:	e121      	b.n	8001c30 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019ec:	2201      	movs	r2, #1
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 8110 	bne.w	8001c2a <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b12      	cmp	r3, #18
 8001a10:	d034      	beq.n	8001a7c <HAL_GPIO_Init+0xa4>
 8001a12:	2b12      	cmp	r3, #18
 8001a14:	d80d      	bhi.n	8001a32 <HAL_GPIO_Init+0x5a>
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d02b      	beq.n	8001a72 <HAL_GPIO_Init+0x9a>
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d804      	bhi.n	8001a28 <HAL_GPIO_Init+0x50>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d031      	beq.n	8001a86 <HAL_GPIO_Init+0xae>
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d01c      	beq.n	8001a60 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a26:	e048      	b.n	8001aba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d043      	beq.n	8001ab4 <HAL_GPIO_Init+0xdc>
 8001a2c:	2b11      	cmp	r3, #17
 8001a2e:	d01b      	beq.n	8001a68 <HAL_GPIO_Init+0x90>
          break;
 8001a30:	e043      	b.n	8001aba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a32:	4a86      	ldr	r2, [pc, #536]	; (8001c4c <HAL_GPIO_Init+0x274>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d026      	beq.n	8001a86 <HAL_GPIO_Init+0xae>
 8001a38:	4a84      	ldr	r2, [pc, #528]	; (8001c4c <HAL_GPIO_Init+0x274>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d806      	bhi.n	8001a4c <HAL_GPIO_Init+0x74>
 8001a3e:	4a84      	ldr	r2, [pc, #528]	; (8001c50 <HAL_GPIO_Init+0x278>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d020      	beq.n	8001a86 <HAL_GPIO_Init+0xae>
 8001a44:	4a83      	ldr	r2, [pc, #524]	; (8001c54 <HAL_GPIO_Init+0x27c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01d      	beq.n	8001a86 <HAL_GPIO_Init+0xae>
          break;
 8001a4a:	e036      	b.n	8001aba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a4c:	4a82      	ldr	r2, [pc, #520]	; (8001c58 <HAL_GPIO_Init+0x280>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d019      	beq.n	8001a86 <HAL_GPIO_Init+0xae>
 8001a52:	4a82      	ldr	r2, [pc, #520]	; (8001c5c <HAL_GPIO_Init+0x284>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d016      	beq.n	8001a86 <HAL_GPIO_Init+0xae>
 8001a58:	4a81      	ldr	r2, [pc, #516]	; (8001c60 <HAL_GPIO_Init+0x288>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0xae>
          break;
 8001a5e:	e02c      	b.n	8001aba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e028      	b.n	8001aba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	623b      	str	r3, [r7, #32]
          break;
 8001a70:	e023      	b.n	8001aba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	3308      	adds	r3, #8
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e01e      	b.n	8001aba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	330c      	adds	r3, #12
 8001a82:	623b      	str	r3, [r7, #32]
          break;
 8001a84:	e019      	b.n	8001aba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e012      	b.n	8001aba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	611a      	str	r2, [r3, #16]
          break;
 8001aa6:	e008      	b.n	8001aba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	615a      	str	r2, [r3, #20]
          break;
 8001ab2:	e002      	b.n	8001aba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2bff      	cmp	r3, #255	; 0xff
 8001abe:	d801      	bhi.n	8001ac4 <HAL_GPIO_Init+0xec>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	e001      	b.n	8001ac8 <HAL_GPIO_Init+0xf0>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2bff      	cmp	r3, #255	; 0xff
 8001ace:	d802      	bhi.n	8001ad6 <HAL_GPIO_Init+0xfe>
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_Init+0x104>
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	3b08      	subs	r3, #8
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	401a      	ands	r2, r3
 8001aee:	6a39      	ldr	r1, [r7, #32]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	431a      	orrs	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 8090 	beq.w	8001c2a <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b0a:	4b56      	ldr	r3, [pc, #344]	; (8001c64 <HAL_GPIO_Init+0x28c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a55      	ldr	r2, [pc, #340]	; (8001c64 <HAL_GPIO_Init+0x28c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_GPIO_Init+0x28c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b22:	4a51      	ldr	r2, [pc, #324]	; (8001c68 <HAL_GPIO_Init+0x290>)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a48      	ldr	r2, [pc, #288]	; (8001c6c <HAL_GPIO_Init+0x294>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x192>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a47      	ldr	r2, [pc, #284]	; (8001c70 <HAL_GPIO_Init+0x298>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x18e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a46      	ldr	r2, [pc, #280]	; (8001c74 <HAL_GPIO_Init+0x29c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x18a>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e004      	b.n	8001b6c <HAL_GPIO_Init+0x194>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_Init+0x194>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x194>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	f002 0203 	and.w	r2, r2, #3
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b7c:	493a      	ldr	r1, [pc, #232]	; (8001c68 <HAL_GPIO_Init+0x290>)
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4937      	ldr	r1, [pc, #220]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
 8001ba2:	e006      	b.n	8001bb2 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4932      	ldr	r1, [pc, #200]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	492d      	ldr	r1, [pc, #180]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
 8001bca:	e006      	b.n	8001bda <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4928      	ldr	r1, [pc, #160]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	4923      	ldr	r1, [pc, #140]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
 8001bf2:	e006      	b.n	8001c02 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	491e      	ldr	r1, [pc, #120]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	4919      	ldr	r1, [pc, #100]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60cb      	str	r3, [r1, #12]
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4914      	ldr	r1, [pc, #80]	; (8001c78 <HAL_GPIO_Init+0x2a0>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f47f aed6 	bne.w	80019ec <HAL_GPIO_Init+0x14>
  }
}
 8001c40:	bf00      	nop
 8001c42:	372c      	adds	r7, #44	; 0x2c
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	10210000 	.word	0x10210000
 8001c50:	10110000 	.word	0x10110000
 8001c54:	10120000 	.word	0x10120000
 8001c58:	10310000 	.word	0x10310000
 8001c5c:	10320000 	.word	0x10320000
 8001c60:	10220000 	.word	0x10220000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	40010800 	.word	0x40010800
 8001c70:	40010c00 	.word	0x40010c00
 8001c74:	40011000 	.word	0x40011000
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e26c      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8087 	beq.w	8001daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca8:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d112      	bne.n	8001cda <HAL_RCC_OscConfig+0x5e>
 8001cb4:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d10b      	bne.n	8001cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d06c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x12c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d168      	bne.n	8001da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e246      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x76>
 8001ce4:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a7f      	ldr	r2, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	e02e      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x98>
 8001cfa:	4b7b      	ldr	r3, [pc, #492]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7a      	ldr	r2, [pc, #488]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a77      	ldr	r2, [pc, #476]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e01d      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0xbc>
 8001d1e:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a71      	ldr	r2, [pc, #452]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001d38:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a67      	ldr	r2, [pc, #412]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff f916 	bl	8000f88 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff f912 	bl	8000f88 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e1fa      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0xe4>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff f902 	bl	8000f88 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff f8fe 	bl	8000f88 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e1e6      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x10c>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d063      	beq.n	8001e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db6:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d11c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x18c>
 8001dce:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d116      	bne.n	8001e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x176>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1ba      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4939      	ldr	r1, [pc, #228]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	e03a      	b.n	8001e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e10:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x270>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff f8b7 	bl	8000f88 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff f8b3 	bl	8000f88 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e19b      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4927      	ldr	r1, [pc, #156]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_OscConfig+0x270>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff f896 	bl	8000f88 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff f892 	bl	8000f88 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e17a      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d03a      	beq.n	8001f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d019      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_RCC_OscConfig+0x274>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff f876 	bl	8000f88 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f872 	bl	8000f88 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e15a      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f000 fada 	bl	8002478 <RCC_Delay>
 8001ec4:	e01c      	b.n	8001f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff f85c 	bl	8000f88 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed2:	e00f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff f858 	bl	8000f88 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d908      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e140      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	42420000 	.word	0x42420000
 8001ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	4b9e      	ldr	r3, [pc, #632]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e9      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a6 	beq.w	800205a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4b97      	ldr	r3, [pc, #604]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b94      	ldr	r3, [pc, #592]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a93      	ldr	r2, [pc, #588]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	61d3      	str	r3, [r2, #28]
 8001f2a:	4b91      	ldr	r3, [pc, #580]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f36:	2301      	movs	r3, #1
 8001f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b8e      	ldr	r3, [pc, #568]	; (8002174 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_RCC_OscConfig+0x4f8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a8a      	ldr	r2, [pc, #552]	; (8002174 <HAL_RCC_OscConfig+0x4f8>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7ff f819 	bl	8000f88 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff f815 	bl	8000f88 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0fd      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b81      	ldr	r3, [pc, #516]	; (8002174 <HAL_RCC_OscConfig+0x4f8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x312>
 8001f80:	4b7b      	ldr	r3, [pc, #492]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a7a      	ldr	r2, [pc, #488]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e02d      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x334>
 8001f96:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a75      	ldr	r2, [pc, #468]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	4b73      	ldr	r3, [pc, #460]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a72      	ldr	r2, [pc, #456]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	e01c      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x356>
 8001fb8:	4b6d      	ldr	r3, [pc, #436]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a6c      	ldr	r2, [pc, #432]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a69      	ldr	r2, [pc, #420]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e00b      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001fd2:	4b67      	ldr	r3, [pc, #412]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a66      	ldr	r2, [pc, #408]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6213      	str	r3, [r2, #32]
 8001fde:	4b64      	ldr	r3, [pc, #400]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d015      	beq.n	800201e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7fe ffc9 	bl	8000f88 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7fe ffc5 	bl	8000f88 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e0ab      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	4b57      	ldr	r3, [pc, #348]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ee      	beq.n	8001ffa <HAL_RCC_OscConfig+0x37e>
 800201c:	e014      	b.n	8002048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe ffb3 	bl	8000f88 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe ffaf 	bl	8000f88 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e095      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ee      	bne.n	8002026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4b48      	ldr	r3, [pc, #288]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a47      	ldr	r2, [pc, #284]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8081 	beq.w	8002166 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002064:	4b42      	ldr	r3, [pc, #264]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d061      	beq.n	8002134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d146      	bne.n	8002106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_OscConfig+0x4fc>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe ff83 	bl	8000f88 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7fe ff7f 	bl	8000f88 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e067      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d108      	bne.n	80020c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	492d      	ldr	r1, [pc, #180]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a19      	ldr	r1, [r3, #32]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	430b      	orrs	r3, r1
 80020d2:	4927      	ldr	r1, [pc, #156]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_RCC_OscConfig+0x4fc>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7fe ff53 	bl	8000f88 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7fe ff4f 	bl	8000f88 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e037      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46a>
 8002104:	e02f      	b.n	8002166 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <HAL_RCC_OscConfig+0x4fc>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe ff3c 	bl	8000f88 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe ff38 	bl	8000f88 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e020      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x498>
 8002132:	e018      	b.n	8002166 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e013      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	429a      	cmp	r2, r3
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
 8002178:	42420060 	.word	0x42420060

0800217c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0d0      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0207 	bic.w	r2, r3, #7
 80021a6:	4965      	ldr	r1, [pc, #404]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	494d      	ldr	r1, [pc, #308]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d040      	beq.n	800229c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e073      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06b      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4936      	ldr	r1, [pc, #216]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800226c:	f7fe fe8c 	bl	8000f88 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7fe fe88 	bl	8000f88 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e053      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d210      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 0207 	bic.w	r2, r3, #7
 80022b2:	4922      	ldr	r1, [pc, #136]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e032      	b.n	8002332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4916      	ldr	r1, [pc, #88]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	490e      	ldr	r1, [pc, #56]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230a:	f000 f821 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800230e:	4601      	mov	r1, r0
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	5cd3      	ldrb	r3, [r2, r3]
 800231e:	fa21 f303 	lsr.w	r3, r1, r3
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1cc>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1d0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fdea 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000
 8002340:	40021000 	.word	0x40021000
 8002344:	080041c8 	.word	0x080041c8
 8002348:	20000000 	.word	0x20000000
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	b490      	push	{r4, r7}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002358:	1d3c      	adds	r4, r7, #4
 800235a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800235c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b04      	cmp	r3, #4
 8002388:	d002      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x40>
 800238a:	2b08      	cmp	r3, #8
 800238c:	d003      	beq.n	8002396 <HAL_RCC_GetSysClockFreq+0x46>
 800238e:	e02d      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002392:	623b      	str	r3, [r7, #32]
      break;
 8002394:	e02d      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	0c9b      	lsrs	r3, r3, #18
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023a2:	4413      	add	r3, r2
 80023a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	0c5b      	lsrs	r3, r3, #17
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023c2:	4413      	add	r3, r2
 80023c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	4a0f      	ldr	r2, [pc, #60]	; (800240c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ce:	fb02 f203 	mul.w	r2, r2, r3
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	e004      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	623b      	str	r3, [r7, #32]
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ee:	623b      	str	r3, [r7, #32]
      break;
 80023f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f2:	6a3b      	ldr	r3, [r7, #32]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc90      	pop	{r4, r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	080041a0 	.word	0x080041a0
 8002404:	080041b0 	.word	0x080041b0
 8002408:	40021000 	.word	0x40021000
 800240c:	007a1200 	.word	0x007a1200
 8002410:	003d0900 	.word	0x003d0900

08002414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002418:	4b02      	ldr	r3, [pc, #8]	; (8002424 <HAL_RCC_GetHCLKFreq+0x10>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	20000000 	.word	0x20000000

08002428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800242c:	f7ff fff2 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002430:	4601      	mov	r1, r0
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	4a03      	ldr	r2, [pc, #12]	; (800244c <HAL_RCC_GetPCLK1Freq+0x24>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	080041d8 	.word	0x080041d8

08002450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002454:	f7ff ffde 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002458:	4601      	mov	r1, r0
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	0adb      	lsrs	r3, r3, #11
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4a03      	ldr	r2, [pc, #12]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	080041d8 	.word	0x080041d8

08002478 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <RCC_Delay+0x34>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <RCC_Delay+0x38>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0a5b      	lsrs	r3, r3, #9
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002494:	bf00      	nop
  }
  while (Delay --);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	60fa      	str	r2, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f9      	bne.n	8002494 <RCC_Delay+0x1c>
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000000 	.word	0x20000000
 80024b0:	10624dd3 	.word	0x10624dd3

080024b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d07d      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d4:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	4b4c      	ldr	r3, [pc, #304]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	4a4b      	ldr	r2, [pc, #300]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ea:	61d3      	str	r3, [r2, #28]
 80024ec:	4b49      	ldr	r3, [pc, #292]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f8:	2301      	movs	r3, #1
 80024fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b46      	ldr	r3, [pc, #280]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d118      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a42      	ldr	r2, [pc, #264]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002514:	f7fe fd38 	bl	8000f88 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	e008      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251c:	f7fe fd34 	bl	8000f88 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e06d      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800253a:	4b36      	ldr	r3, [pc, #216]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02e      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d027      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002560:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002568:	4b2c      	ldr	r3, [pc, #176]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800256e:	4a29      	ldr	r2, [pc, #164]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d014      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fd03 	bl	8000f88 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7fe fcff 	bl	8000f88 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e036      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0ee      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4917      	ldr	r1, [pc, #92]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	490b      	ldr	r1, [pc, #44]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4904      	ldr	r1, [pc, #16]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
 800261c:	42420440 	.word	0x42420440

08002620 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b08d      	sub	sp, #52	; 0x34
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002628:	4b55      	ldr	r3, [pc, #340]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800262a:	f107 040c 	add.w	r4, r7, #12
 800262e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	2300      	movs	r3, #0
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d07f      	beq.n	8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002654:	2b10      	cmp	r3, #16
 8002656:	d002      	beq.n	800265e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002658:	2b01      	cmp	r3, #1
 800265a:	d048      	beq.n	80026ee <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800265c:	e08b      	b.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800265e:	4b4a      	ldr	r3, [pc, #296]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002664:	4b48      	ldr	r3, [pc, #288]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d07f      	beq.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	0c9b      	lsrs	r3, r3, #18
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800267c:	4413      	add	r3, r2
 800267e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002682:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d018      	beq.n	80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268e:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0c5b      	lsrs	r3, r3, #17
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800269c:	4413      	add	r3, r2
 800269e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00d      	beq.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80026ae:	4a37      	ldr	r2, [pc, #220]	; (800278c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026be:	e004      	b.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	4a33      	ldr	r2, [pc, #204]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026ca:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026d6:	d102      	bne.n	80026de <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026dc:	e048      	b.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4a2c      	ldr	r2, [pc, #176]	; (8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026ec:	e040      	b.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fe:	d108      	bne.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800270a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002710:	e01f      	b.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271c:	d109      	bne.n	8002732 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800272a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002730:	e00f      	b.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800273c:	d11a      	bne.n	8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d014      	beq.n	8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800274a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002750:	e010      	b.n	8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002752:	e00f      	b.n	8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002754:	f7ff fe7c 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	0b9b      	lsrs	r3, r3, #14
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	3301      	adds	r3, #1
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800276e:	e002      	b.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002770:	bf00      	nop
 8002772:	e000      	b.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002774:	bf00      	nop
    }
  }
  return (frequency);
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002778:	4618      	mov	r0, r3
 800277a:	3734      	adds	r7, #52	; 0x34
 800277c:	46bd      	mov	sp, r7
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	080041b4 	.word	0x080041b4
 8002784:	080041c4 	.word	0x080041c4
 8002788:	40021000 	.word	0x40021000
 800278c:	007a1200 	.word	0x007a1200
 8002790:	003d0900 	.word	0x003d0900
 8002794:	aaaaaaab 	.word	0xaaaaaaab

08002798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e041      	b.n	800282e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fa38 	bl	8000c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f000 fbcc 	bl	8002f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e041      	b.n	80028cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f839 	bl	80028d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f000 fb7d 	bl	8002f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_TIM_PWM_Start+0x24>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e022      	b.n	8002952 <HAL_TIM_PWM_Start+0x6a>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b04      	cmp	r3, #4
 8002910:	d109      	bne.n	8002926 <HAL_TIM_PWM_Start+0x3e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	e015      	b.n	8002952 <HAL_TIM_PWM_Start+0x6a>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d109      	bne.n	8002940 <HAL_TIM_PWM_Start+0x58>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e008      	b.n	8002952 <HAL_TIM_PWM_Start+0x6a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e059      	b.n	8002a0e <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <HAL_TIM_PWM_Start+0x82>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002968:	e013      	b.n	8002992 <HAL_TIM_PWM_Start+0xaa>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d104      	bne.n	800297a <HAL_TIM_PWM_Start+0x92>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002978:	e00b      	b.n	8002992 <HAL_TIM_PWM_Start+0xaa>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d104      	bne.n	800298a <HAL_TIM_PWM_Start+0xa2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002988:	e003      	b.n	8002992 <HAL_TIM_PWM_Start+0xaa>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	6839      	ldr	r1, [r7, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fd60 	bl	8003460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_TIM_PWM_Start+0x130>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d107      	bne.n	80029ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a16      	ldr	r2, [pc, #88]	; (8002a18 <HAL_TIM_PWM_Start+0x130>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_TIM_PWM_Start+0xf0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029cc:	d004      	beq.n	80029d8 <HAL_TIM_PWM_Start+0xf0>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <HAL_TIM_PWM_Start+0x134>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d010      	beq.n	8002a0c <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fa:	e007      	b.n	8002a0c <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400

08002a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d122      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d11b      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0202 	mvn.w	r2, #2
 8002a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa6b 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa5e 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fa6d 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d122      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d11b      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0204 	mvn.w	r2, #4
 8002aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa41 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa34 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fa43 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d122      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d11b      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0208 	mvn.w	r2, #8
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2204      	movs	r2, #4
 8002afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa17 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fa0a 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fa19 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d122      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d11b      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0210 	mvn.w	r2, #16
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f9ed 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002b64:	e005      	b.n	8002b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f9e0 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f9ef 	bl	8002f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10e      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0201 	mvn.w	r2, #1
 8002b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f9bb 	bl	8002f1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b80      	cmp	r3, #128	; 0x80
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d107      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fccd 	bl	800356a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d10e      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d107      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9b3 	bl	8002f62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0220 	mvn.w	r2, #32
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fc98 	bl	8003558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e0ac      	b.n	8002da4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b0c      	cmp	r3, #12
 8002c56:	f200 809f 	bhi.w	8002d98 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c95 	.word	0x08002c95
 8002c64:	08002d99 	.word	0x08002d99
 8002c68:	08002d99 	.word	0x08002d99
 8002c6c:	08002d99 	.word	0x08002d99
 8002c70:	08002cd5 	.word	0x08002cd5
 8002c74:	08002d99 	.word	0x08002d99
 8002c78:	08002d99 	.word	0x08002d99
 8002c7c:	08002d99 	.word	0x08002d99
 8002c80:	08002d17 	.word	0x08002d17
 8002c84:	08002d99 	.word	0x08002d99
 8002c88:	08002d99 	.word	0x08002d99
 8002c8c:	08002d99 	.word	0x08002d99
 8002c90:	08002d57 	.word	0x08002d57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f9c2 	bl	8003024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0208 	orr.w	r2, r2, #8
 8002cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0204 	bic.w	r2, r2, #4
 8002cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6999      	ldr	r1, [r3, #24]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	619a      	str	r2, [r3, #24]
      break;
 8002cd2:	e062      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fa08 	bl	80030f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6999      	ldr	r1, [r3, #24]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	021a      	lsls	r2, r3, #8
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	619a      	str	r2, [r3, #24]
      break;
 8002d14:	e041      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fa51 	bl	80031c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0208 	orr.w	r2, r2, #8
 8002d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0204 	bic.w	r2, r2, #4
 8002d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69d9      	ldr	r1, [r3, #28]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	61da      	str	r2, [r3, #28]
      break;
 8002d54:	e021      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fa9b 	bl	8003298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69d9      	ldr	r1, [r3, #28]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	021a      	lsls	r2, r3, #8
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	61da      	str	r2, [r3, #28]
      break;
 8002d96:	e000      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_ConfigClockSource+0x18>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e0a6      	b.n	8002f12 <HAL_TIM_ConfigClockSource+0x166>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d067      	beq.n	8002ecc <HAL_TIM_ConfigClockSource+0x120>
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d80b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x6c>
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d073      	beq.n	8002eec <HAL_TIM_ConfigClockSource+0x140>
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d802      	bhi.n	8002e0e <HAL_TIM_ConfigClockSource+0x62>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d06f      	beq.n	8002eec <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e0c:	e078      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d06c      	beq.n	8002eec <HAL_TIM_ConfigClockSource+0x140>
 8002e12:	2b30      	cmp	r3, #48	; 0x30
 8002e14:	d06a      	beq.n	8002eec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e16:	e073      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e18:	2b70      	cmp	r3, #112	; 0x70
 8002e1a:	d00d      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0x8c>
 8002e1c:	2b70      	cmp	r3, #112	; 0x70
 8002e1e:	d804      	bhi.n	8002e2a <HAL_TIM_ConfigClockSource+0x7e>
 8002e20:	2b50      	cmp	r3, #80	; 0x50
 8002e22:	d033      	beq.n	8002e8c <HAL_TIM_ConfigClockSource+0xe0>
 8002e24:	2b60      	cmp	r3, #96	; 0x60
 8002e26:	d041      	beq.n	8002eac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e28:	e06a      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2e:	d066      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x152>
 8002e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e34:	d017      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e36:	e063      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f000 faeb 	bl	8003422 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	609a      	str	r2, [r3, #8]
      break;
 8002e64:	e04c      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6899      	ldr	r1, [r3, #8]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f000 fad4 	bl	8003422 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e88:	609a      	str	r2, [r3, #8]
      break;
 8002e8a:	e039      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f000 fa4b 	bl	8003334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2150      	movs	r1, #80	; 0x50
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 faa2 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8002eaa:	e029      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f000 fa69 	bl	8003390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2160      	movs	r1, #96	; 0x60
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fa92 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8002eca:	e019      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f000 fa2b 	bl	8003334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2140      	movs	r1, #64	; 0x40
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fa82 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8002eea:	e009      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f000 fa79 	bl	80033ee <TIM_ITRx_SetConfig>
        break;
 8002efc:	e000      	b.n	8002f00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002efe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a25      	ldr	r2, [pc, #148]	; (800301c <TIM_Base_SetConfig+0xa8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_Base_SetConfig+0x28>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0x28>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a22      	ldr	r2, [pc, #136]	; (8003020 <TIM_Base_SetConfig+0xac>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d108      	bne.n	8002fae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1a      	ldr	r2, [pc, #104]	; (800301c <TIM_Base_SetConfig+0xa8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_Base_SetConfig+0x52>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d003      	beq.n	8002fc6 <TIM_Base_SetConfig+0x52>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a17      	ldr	r2, [pc, #92]	; (8003020 <TIM_Base_SetConfig+0xac>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a07      	ldr	r2, [pc, #28]	; (800301c <TIM_Base_SetConfig+0xa8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d103      	bne.n	800300c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	615a      	str	r2, [r3, #20]
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40000400 	.word	0x40000400

08003024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f023 0201 	bic.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f023 0302 	bic.w	r3, r3, #2
 800306c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <TIM_OC1_SetConfig+0xc8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10c      	bne.n	800309a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0308 	bic.w	r3, r3, #8
 8003086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a13      	ldr	r2, [pc, #76]	; (80030ec <TIM_OC1_SetConfig+0xc8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d111      	bne.n	80030c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	621a      	str	r2, [r3, #32]
}
 80030e0:	bf00      	nop
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00

080030f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f023 0210 	bic.w	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0320 	bic.w	r3, r3, #32
 800313a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <TIM_OC2_SetConfig+0xd0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10d      	bne.n	800316c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800316a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <TIM_OC2_SetConfig+0xd0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d113      	bne.n	800319c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800317a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	40012c00 	.word	0x40012c00

080031c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800320c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <TIM_OC3_SetConfig+0xd0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10d      	bne.n	800323e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800323c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <TIM_OC3_SetConfig+0xd0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d113      	bne.n	800326e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800324c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	621a      	str	r2, [r3, #32]
}
 8003288:	bf00      	nop
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40012c00 	.word	0x40012c00

08003298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	031b      	lsls	r3, r3, #12
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a0f      	ldr	r2, [pc, #60]	; (8003330 <TIM_OC4_SetConfig+0x98>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d109      	bne.n	800330c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	019b      	lsls	r3, r3, #6
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40012c00 	.word	0x40012c00

08003334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800335e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 030a 	bic.w	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 0210 	bic.w	r2, r3, #16
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	031b      	lsls	r3, r3, #12
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	621a      	str	r2, [r3, #32]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	f043 0307 	orr.w	r3, r3, #7
 8003410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003422:	b480      	push	{r7}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800343c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	021a      	lsls	r2, r3, #8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	431a      	orrs	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	609a      	str	r2, [r3, #8]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	2201      	movs	r2, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a1a      	ldr	r2, [r3, #32]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	43db      	mvns	r3, r3
 8003482:	401a      	ands	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	431a      	orrs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034bc:	2302      	movs	r3, #2
 80034be:	e041      	b.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a14      	ldr	r2, [pc, #80]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350c:	d004      	beq.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10c      	bne.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	4313      	orrs	r3, r2
 8003528:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40000400 	.word	0x40000400

08003558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e03f      	b.n	800360e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fbb8 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f905 	bl	80037d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b08a      	sub	sp, #40	; 0x28
 800361a:	af02      	add	r7, sp, #8
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d17c      	bne.n	8003730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_UART_Transmit+0x2c>
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e075      	b.n	8003732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_UART_Transmit+0x3e>
 8003650:	2302      	movs	r3, #2
 8003652:	e06e      	b.n	8003732 <HAL_UART_Transmit+0x11c>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2221      	movs	r2, #33	; 0x21
 8003666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800366a:	f7fd fc8d 	bl	8000f88 <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003684:	d108      	bne.n	8003698 <HAL_UART_Transmit+0x82>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e003      	b.n	80036a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80036a8:	e02a      	b.n	8003700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2180      	movs	r1, #128	; 0x80
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f840 	bl	800373a <UART_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e036      	b.n	8003732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	3302      	adds	r3, #2
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	e007      	b.n	80036f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	3301      	adds	r3, #1
 80036f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1cf      	bne.n	80036aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2200      	movs	r2, #0
 8003712:	2140      	movs	r1, #64	; 0x40
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f810 	bl	800373a <UART_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e006      	b.n	8003732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374a:	e02c      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d028      	beq.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x30>
 800375a:	f7fd fc15 	bl	8000f88 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	429a      	cmp	r2, r3
 8003768:	d21d      	bcs.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003778:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e00f      	b.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d0c3      	beq.n	800374c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800380a:	f023 030c 	bic.w	r3, r3, #12
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	430b      	orrs	r3, r1
 8003816:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2c      	ldr	r2, [pc, #176]	; (80038e4 <UART_SetConfig+0x114>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d103      	bne.n	8003840 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003838:	f7fe fe0a 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	e002      	b.n	8003846 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003840:	f7fe fdf2 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 8003844:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <UART_SetConfig+0x118>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	0119      	lsls	r1, r3, #4
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009a      	lsls	r2, r3, #2
 8003870:	441a      	add	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	fbb2 f2f3 	udiv	r2, r2, r3
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <UART_SetConfig+0x118>)
 800387e:	fba3 0302 	umull	r0, r3, r3, r2
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	2064      	movs	r0, #100	; 0x64
 8003886:	fb00 f303 	mul.w	r3, r0, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	3332      	adds	r3, #50	; 0x32
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <UART_SetConfig+0x118>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389c:	4419      	add	r1, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009a      	lsls	r2, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <UART_SetConfig+0x118>)
 80038b6:	fba3 0302 	umull	r0, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2064      	movs	r0, #100	; 0x64
 80038be:	fb00 f303 	mul.w	r3, r0, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <UART_SetConfig+0x118>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	440a      	add	r2, r1
 80038da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40013800 	.word	0x40013800
 80038e8:	51eb851f 	.word	0x51eb851f

080038ec <__errno>:
 80038ec:	4b01      	ldr	r3, [pc, #4]	; (80038f4 <__errno+0x8>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	2000000c 	.word	0x2000000c

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	2500      	movs	r5, #0
 80038fc:	4e0c      	ldr	r6, [pc, #48]	; (8003930 <__libc_init_array+0x38>)
 80038fe:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 8003900:	1ba4      	subs	r4, r4, r6
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	42a5      	cmp	r5, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	f000 fc34 	bl	8004174 <_init>
 800390c:	2500      	movs	r5, #0
 800390e:	4e0a      	ldr	r6, [pc, #40]	; (8003938 <__libc_init_array+0x40>)
 8003910:	4c0a      	ldr	r4, [pc, #40]	; (800393c <__libc_init_array+0x44>)
 8003912:	1ba4      	subs	r4, r4, r6
 8003914:	10a4      	asrs	r4, r4, #2
 8003916:	42a5      	cmp	r5, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003920:	4798      	blx	r3
 8003922:	3501      	adds	r5, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800392a:	4798      	blx	r3
 800392c:	3501      	adds	r5, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	08004214 	.word	0x08004214
 8003934:	08004214 	.word	0x08004214
 8003938:	08004214 	.word	0x08004214
 800393c:	08004218 	.word	0x08004218

08003940 <memset>:
 8003940:	4603      	mov	r3, r0
 8003942:	4402      	add	r2, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <siprintf>:
 8003950:	b40e      	push	{r1, r2, r3}
 8003952:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003956:	b500      	push	{lr}
 8003958:	b09c      	sub	sp, #112	; 0x70
 800395a:	ab1d      	add	r3, sp, #116	; 0x74
 800395c:	9002      	str	r0, [sp, #8]
 800395e:	9006      	str	r0, [sp, #24]
 8003960:	9107      	str	r1, [sp, #28]
 8003962:	9104      	str	r1, [sp, #16]
 8003964:	4808      	ldr	r0, [pc, #32]	; (8003988 <siprintf+0x38>)
 8003966:	4909      	ldr	r1, [pc, #36]	; (800398c <siprintf+0x3c>)
 8003968:	f853 2b04 	ldr.w	r2, [r3], #4
 800396c:	9105      	str	r1, [sp, #20]
 800396e:	6800      	ldr	r0, [r0, #0]
 8003970:	a902      	add	r1, sp, #8
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	f000 f866 	bl	8003a44 <_svfiprintf_r>
 8003978:	2200      	movs	r2, #0
 800397a:	9b02      	ldr	r3, [sp, #8]
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	b01c      	add	sp, #112	; 0x70
 8003980:	f85d eb04 	ldr.w	lr, [sp], #4
 8003984:	b003      	add	sp, #12
 8003986:	4770      	bx	lr
 8003988:	2000000c 	.word	0x2000000c
 800398c:	ffff0208 	.word	0xffff0208

08003990 <__ssputs_r>:
 8003990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003994:	688e      	ldr	r6, [r1, #8]
 8003996:	4682      	mov	sl, r0
 8003998:	429e      	cmp	r6, r3
 800399a:	460c      	mov	r4, r1
 800399c:	4690      	mov	r8, r2
 800399e:	4699      	mov	r9, r3
 80039a0:	d837      	bhi.n	8003a12 <__ssputs_r+0x82>
 80039a2:	898a      	ldrh	r2, [r1, #12]
 80039a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039a8:	d031      	beq.n	8003a0e <__ssputs_r+0x7e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	6825      	ldr	r5, [r4, #0]
 80039ae:	6909      	ldr	r1, [r1, #16]
 80039b0:	1a6f      	subs	r7, r5, r1
 80039b2:	6965      	ldr	r5, [r4, #20]
 80039b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80039bc:	f109 0301 	add.w	r3, r9, #1
 80039c0:	443b      	add	r3, r7
 80039c2:	429d      	cmp	r5, r3
 80039c4:	bf38      	it	cc
 80039c6:	461d      	movcc	r5, r3
 80039c8:	0553      	lsls	r3, r2, #21
 80039ca:	d530      	bpl.n	8003a2e <__ssputs_r+0x9e>
 80039cc:	4629      	mov	r1, r5
 80039ce:	f000 fb37 	bl	8004040 <_malloc_r>
 80039d2:	4606      	mov	r6, r0
 80039d4:	b950      	cbnz	r0, 80039ec <__ssputs_r+0x5c>
 80039d6:	230c      	movs	r3, #12
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	f8ca 3000 	str.w	r3, [sl]
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e6:	81a3      	strh	r3, [r4, #12]
 80039e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ec:	463a      	mov	r2, r7
 80039ee:	6921      	ldr	r1, [r4, #16]
 80039f0:	f000 fab6 	bl	8003f60 <memcpy>
 80039f4:	89a3      	ldrh	r3, [r4, #12]
 80039f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fe:	81a3      	strh	r3, [r4, #12]
 8003a00:	6126      	str	r6, [r4, #16]
 8003a02:	443e      	add	r6, r7
 8003a04:	6026      	str	r6, [r4, #0]
 8003a06:	464e      	mov	r6, r9
 8003a08:	6165      	str	r5, [r4, #20]
 8003a0a:	1bed      	subs	r5, r5, r7
 8003a0c:	60a5      	str	r5, [r4, #8]
 8003a0e:	454e      	cmp	r6, r9
 8003a10:	d900      	bls.n	8003a14 <__ssputs_r+0x84>
 8003a12:	464e      	mov	r6, r9
 8003a14:	4632      	mov	r2, r6
 8003a16:	4641      	mov	r1, r8
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	f000 faac 	bl	8003f76 <memmove>
 8003a1e:	68a3      	ldr	r3, [r4, #8]
 8003a20:	2000      	movs	r0, #0
 8003a22:	1b9b      	subs	r3, r3, r6
 8003a24:	60a3      	str	r3, [r4, #8]
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	441e      	add	r6, r3
 8003a2a:	6026      	str	r6, [r4, #0]
 8003a2c:	e7dc      	b.n	80039e8 <__ssputs_r+0x58>
 8003a2e:	462a      	mov	r2, r5
 8003a30:	f000 fb60 	bl	80040f4 <_realloc_r>
 8003a34:	4606      	mov	r6, r0
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d1e2      	bne.n	8003a00 <__ssputs_r+0x70>
 8003a3a:	6921      	ldr	r1, [r4, #16]
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	f000 fab3 	bl	8003fa8 <_free_r>
 8003a42:	e7c8      	b.n	80039d6 <__ssputs_r+0x46>

08003a44 <_svfiprintf_r>:
 8003a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a48:	461d      	mov	r5, r3
 8003a4a:	898b      	ldrh	r3, [r1, #12]
 8003a4c:	b09d      	sub	sp, #116	; 0x74
 8003a4e:	061f      	lsls	r7, r3, #24
 8003a50:	4680      	mov	r8, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	4616      	mov	r6, r2
 8003a56:	d50f      	bpl.n	8003a78 <_svfiprintf_r+0x34>
 8003a58:	690b      	ldr	r3, [r1, #16]
 8003a5a:	b96b      	cbnz	r3, 8003a78 <_svfiprintf_r+0x34>
 8003a5c:	2140      	movs	r1, #64	; 0x40
 8003a5e:	f000 faef 	bl	8004040 <_malloc_r>
 8003a62:	6020      	str	r0, [r4, #0]
 8003a64:	6120      	str	r0, [r4, #16]
 8003a66:	b928      	cbnz	r0, 8003a74 <_svfiprintf_r+0x30>
 8003a68:	230c      	movs	r3, #12
 8003a6a:	f8c8 3000 	str.w	r3, [r8]
 8003a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a72:	e0c8      	b.n	8003c06 <_svfiprintf_r+0x1c2>
 8003a74:	2340      	movs	r3, #64	; 0x40
 8003a76:	6163      	str	r3, [r4, #20]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a82:	2330      	movs	r3, #48	; 0x30
 8003a84:	f04f 0b01 	mov.w	fp, #1
 8003a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a8c:	9503      	str	r5, [sp, #12]
 8003a8e:	4637      	mov	r7, r6
 8003a90:	463d      	mov	r5, r7
 8003a92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a96:	b10b      	cbz	r3, 8003a9c <_svfiprintf_r+0x58>
 8003a98:	2b25      	cmp	r3, #37	; 0x25
 8003a9a:	d13e      	bne.n	8003b1a <_svfiprintf_r+0xd6>
 8003a9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003aa0:	d00b      	beq.n	8003aba <_svfiprintf_r+0x76>
 8003aa2:	4653      	mov	r3, sl
 8003aa4:	4632      	mov	r2, r6
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	4640      	mov	r0, r8
 8003aaa:	f7ff ff71 	bl	8003990 <__ssputs_r>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	f000 80a4 	beq.w	8003bfc <_svfiprintf_r+0x1b8>
 8003ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ab6:	4453      	add	r3, sl
 8003ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aba:	783b      	ldrb	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 809d 	beq.w	8003bfc <_svfiprintf_r+0x1b8>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	9307      	str	r3, [sp, #28]
 8003ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ad6:	462f      	mov	r7, r5
 8003ad8:	2205      	movs	r2, #5
 8003ada:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003ade:	4850      	ldr	r0, [pc, #320]	; (8003c20 <_svfiprintf_r+0x1dc>)
 8003ae0:	f000 fa30 	bl	8003f44 <memchr>
 8003ae4:	9b04      	ldr	r3, [sp, #16]
 8003ae6:	b9d0      	cbnz	r0, 8003b1e <_svfiprintf_r+0xda>
 8003ae8:	06d9      	lsls	r1, r3, #27
 8003aea:	bf44      	itt	mi
 8003aec:	2220      	movmi	r2, #32
 8003aee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003af2:	071a      	lsls	r2, r3, #28
 8003af4:	bf44      	itt	mi
 8003af6:	222b      	movmi	r2, #43	; 0x2b
 8003af8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003afc:	782a      	ldrb	r2, [r5, #0]
 8003afe:	2a2a      	cmp	r2, #42	; 0x2a
 8003b00:	d015      	beq.n	8003b2e <_svfiprintf_r+0xea>
 8003b02:	462f      	mov	r7, r5
 8003b04:	2000      	movs	r0, #0
 8003b06:	250a      	movs	r5, #10
 8003b08:	9a07      	ldr	r2, [sp, #28]
 8003b0a:	4639      	mov	r1, r7
 8003b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b10:	3b30      	subs	r3, #48	; 0x30
 8003b12:	2b09      	cmp	r3, #9
 8003b14:	d94d      	bls.n	8003bb2 <_svfiprintf_r+0x16e>
 8003b16:	b1b8      	cbz	r0, 8003b48 <_svfiprintf_r+0x104>
 8003b18:	e00f      	b.n	8003b3a <_svfiprintf_r+0xf6>
 8003b1a:	462f      	mov	r7, r5
 8003b1c:	e7b8      	b.n	8003a90 <_svfiprintf_r+0x4c>
 8003b1e:	4a40      	ldr	r2, [pc, #256]	; (8003c20 <_svfiprintf_r+0x1dc>)
 8003b20:	463d      	mov	r5, r7
 8003b22:	1a80      	subs	r0, r0, r2
 8003b24:	fa0b f000 	lsl.w	r0, fp, r0
 8003b28:	4318      	orrs	r0, r3
 8003b2a:	9004      	str	r0, [sp, #16]
 8003b2c:	e7d3      	b.n	8003ad6 <_svfiprintf_r+0x92>
 8003b2e:	9a03      	ldr	r2, [sp, #12]
 8003b30:	1d11      	adds	r1, r2, #4
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	9103      	str	r1, [sp, #12]
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	db01      	blt.n	8003b3e <_svfiprintf_r+0xfa>
 8003b3a:	9207      	str	r2, [sp, #28]
 8003b3c:	e004      	b.n	8003b48 <_svfiprintf_r+0x104>
 8003b3e:	4252      	negs	r2, r2
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	9207      	str	r2, [sp, #28]
 8003b46:	9304      	str	r3, [sp, #16]
 8003b48:	783b      	ldrb	r3, [r7, #0]
 8003b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b4c:	d10c      	bne.n	8003b68 <_svfiprintf_r+0x124>
 8003b4e:	787b      	ldrb	r3, [r7, #1]
 8003b50:	2b2a      	cmp	r3, #42	; 0x2a
 8003b52:	d133      	bne.n	8003bbc <_svfiprintf_r+0x178>
 8003b54:	9b03      	ldr	r3, [sp, #12]
 8003b56:	3702      	adds	r7, #2
 8003b58:	1d1a      	adds	r2, r3, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	9203      	str	r2, [sp, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bfb8      	it	lt
 8003b62:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b66:	9305      	str	r3, [sp, #20]
 8003b68:	4d2e      	ldr	r5, [pc, #184]	; (8003c24 <_svfiprintf_r+0x1e0>)
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	7839      	ldrb	r1, [r7, #0]
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 f9e8 	bl	8003f44 <memchr>
 8003b74:	b138      	cbz	r0, 8003b86 <_svfiprintf_r+0x142>
 8003b76:	2340      	movs	r3, #64	; 0x40
 8003b78:	1b40      	subs	r0, r0, r5
 8003b7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b7e:	9b04      	ldr	r3, [sp, #16]
 8003b80:	3701      	adds	r7, #1
 8003b82:	4303      	orrs	r3, r0
 8003b84:	9304      	str	r3, [sp, #16]
 8003b86:	7839      	ldrb	r1, [r7, #0]
 8003b88:	2206      	movs	r2, #6
 8003b8a:	4827      	ldr	r0, [pc, #156]	; (8003c28 <_svfiprintf_r+0x1e4>)
 8003b8c:	1c7e      	adds	r6, r7, #1
 8003b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b92:	f000 f9d7 	bl	8003f44 <memchr>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d038      	beq.n	8003c0c <_svfiprintf_r+0x1c8>
 8003b9a:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <_svfiprintf_r+0x1e8>)
 8003b9c:	bb13      	cbnz	r3, 8003be4 <_svfiprintf_r+0x1a0>
 8003b9e:	9b03      	ldr	r3, [sp, #12]
 8003ba0:	3307      	adds	r3, #7
 8003ba2:	f023 0307 	bic.w	r3, r3, #7
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	9303      	str	r3, [sp, #12]
 8003baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bac:	444b      	add	r3, r9
 8003bae:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb0:	e76d      	b.n	8003a8e <_svfiprintf_r+0x4a>
 8003bb2:	fb05 3202 	mla	r2, r5, r2, r3
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	460f      	mov	r7, r1
 8003bba:	e7a6      	b.n	8003b0a <_svfiprintf_r+0xc6>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	250a      	movs	r5, #10
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	3701      	adds	r7, #1
 8003bc4:	9305      	str	r3, [sp, #20]
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bcc:	3a30      	subs	r2, #48	; 0x30
 8003bce:	2a09      	cmp	r2, #9
 8003bd0:	d903      	bls.n	8003bda <_svfiprintf_r+0x196>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0c8      	beq.n	8003b68 <_svfiprintf_r+0x124>
 8003bd6:	9105      	str	r1, [sp, #20]
 8003bd8:	e7c6      	b.n	8003b68 <_svfiprintf_r+0x124>
 8003bda:	fb05 2101 	mla	r1, r5, r1, r2
 8003bde:	2301      	movs	r3, #1
 8003be0:	4607      	mov	r7, r0
 8003be2:	e7f0      	b.n	8003bc6 <_svfiprintf_r+0x182>
 8003be4:	ab03      	add	r3, sp, #12
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	4622      	mov	r2, r4
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <_svfiprintf_r+0x1ec>)
 8003bec:	a904      	add	r1, sp, #16
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f3af 8000 	nop.w
 8003bf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003bf8:	4681      	mov	r9, r0
 8003bfa:	d1d6      	bne.n	8003baa <_svfiprintf_r+0x166>
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	065b      	lsls	r3, r3, #25
 8003c00:	f53f af35 	bmi.w	8003a6e <_svfiprintf_r+0x2a>
 8003c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c06:	b01d      	add	sp, #116	; 0x74
 8003c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0c:	ab03      	add	r3, sp, #12
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	4622      	mov	r2, r4
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <_svfiprintf_r+0x1ec>)
 8003c14:	a904      	add	r1, sp, #16
 8003c16:	4640      	mov	r0, r8
 8003c18:	f000 f882 	bl	8003d20 <_printf_i>
 8003c1c:	e7ea      	b.n	8003bf4 <_svfiprintf_r+0x1b0>
 8003c1e:	bf00      	nop
 8003c20:	080041e0 	.word	0x080041e0
 8003c24:	080041e6 	.word	0x080041e6
 8003c28:	080041ea 	.word	0x080041ea
 8003c2c:	00000000 	.word	0x00000000
 8003c30:	08003991 	.word	0x08003991

08003c34 <_printf_common>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	4691      	mov	r9, r2
 8003c3a:	461f      	mov	r7, r3
 8003c3c:	688a      	ldr	r2, [r1, #8]
 8003c3e:	690b      	ldr	r3, [r1, #16]
 8003c40:	4606      	mov	r6, r0
 8003c42:	4293      	cmp	r3, r2
 8003c44:	bfb8      	it	lt
 8003c46:	4613      	movlt	r3, r2
 8003c48:	f8c9 3000 	str.w	r3, [r9]
 8003c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c50:	460c      	mov	r4, r1
 8003c52:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c56:	b112      	cbz	r2, 8003c5e <_printf_common+0x2a>
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f8c9 3000 	str.w	r3, [r9]
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	0699      	lsls	r1, r3, #26
 8003c62:	bf42      	ittt	mi
 8003c64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c68:	3302      	addmi	r3, #2
 8003c6a:	f8c9 3000 	strmi.w	r3, [r9]
 8003c6e:	6825      	ldr	r5, [r4, #0]
 8003c70:	f015 0506 	ands.w	r5, r5, #6
 8003c74:	d107      	bne.n	8003c86 <_printf_common+0x52>
 8003c76:	f104 0a19 	add.w	sl, r4, #25
 8003c7a:	68e3      	ldr	r3, [r4, #12]
 8003c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	42ab      	cmp	r3, r5
 8003c84:	dc29      	bgt.n	8003cda <_printf_common+0xa6>
 8003c86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c8a:	6822      	ldr	r2, [r4, #0]
 8003c8c:	3300      	adds	r3, #0
 8003c8e:	bf18      	it	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	0692      	lsls	r2, r2, #26
 8003c94:	d42e      	bmi.n	8003cf4 <_printf_common+0xc0>
 8003c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c9a:	4639      	mov	r1, r7
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	47c0      	blx	r8
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d021      	beq.n	8003ce8 <_printf_common+0xb4>
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	68e5      	ldr	r5, [r4, #12]
 8003ca8:	f003 0306 	and.w	r3, r3, #6
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	bf18      	it	ne
 8003cb0:	2500      	movne	r5, #0
 8003cb2:	f8d9 2000 	ldr.w	r2, [r9]
 8003cb6:	f04f 0900 	mov.w	r9, #0
 8003cba:	bf08      	it	eq
 8003cbc:	1aad      	subeq	r5, r5, r2
 8003cbe:	68a3      	ldr	r3, [r4, #8]
 8003cc0:	6922      	ldr	r2, [r4, #16]
 8003cc2:	bf08      	it	eq
 8003cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	bfc4      	itt	gt
 8003ccc:	1a9b      	subgt	r3, r3, r2
 8003cce:	18ed      	addgt	r5, r5, r3
 8003cd0:	341a      	adds	r4, #26
 8003cd2:	454d      	cmp	r5, r9
 8003cd4:	d11a      	bne.n	8003d0c <_printf_common+0xd8>
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	e008      	b.n	8003cec <_printf_common+0xb8>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4652      	mov	r2, sl
 8003cde:	4639      	mov	r1, r7
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	47c0      	blx	r8
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d103      	bne.n	8003cf0 <_printf_common+0xbc>
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf0:	3501      	adds	r5, #1
 8003cf2:	e7c2      	b.n	8003c7a <_printf_common+0x46>
 8003cf4:	2030      	movs	r0, #48	; 0x30
 8003cf6:	18e1      	adds	r1, r4, r3
 8003cf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d02:	4422      	add	r2, r4
 8003d04:	3302      	adds	r3, #2
 8003d06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d0a:	e7c4      	b.n	8003c96 <_printf_common+0x62>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4622      	mov	r2, r4
 8003d10:	4639      	mov	r1, r7
 8003d12:	4630      	mov	r0, r6
 8003d14:	47c0      	blx	r8
 8003d16:	3001      	adds	r0, #1
 8003d18:	d0e6      	beq.n	8003ce8 <_printf_common+0xb4>
 8003d1a:	f109 0901 	add.w	r9, r9, #1
 8003d1e:	e7d8      	b.n	8003cd2 <_printf_common+0x9e>

08003d20 <_printf_i>:
 8003d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d28:	460c      	mov	r4, r1
 8003d2a:	7e09      	ldrb	r1, [r1, #24]
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	296e      	cmp	r1, #110	; 0x6e
 8003d30:	4617      	mov	r7, r2
 8003d32:	4606      	mov	r6, r0
 8003d34:	4698      	mov	r8, r3
 8003d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d38:	f000 80b3 	beq.w	8003ea2 <_printf_i+0x182>
 8003d3c:	d822      	bhi.n	8003d84 <_printf_i+0x64>
 8003d3e:	2963      	cmp	r1, #99	; 0x63
 8003d40:	d036      	beq.n	8003db0 <_printf_i+0x90>
 8003d42:	d80a      	bhi.n	8003d5a <_printf_i+0x3a>
 8003d44:	2900      	cmp	r1, #0
 8003d46:	f000 80b9 	beq.w	8003ebc <_printf_i+0x19c>
 8003d4a:	2958      	cmp	r1, #88	; 0x58
 8003d4c:	f000 8083 	beq.w	8003e56 <_printf_i+0x136>
 8003d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d58:	e032      	b.n	8003dc0 <_printf_i+0xa0>
 8003d5a:	2964      	cmp	r1, #100	; 0x64
 8003d5c:	d001      	beq.n	8003d62 <_printf_i+0x42>
 8003d5e:	2969      	cmp	r1, #105	; 0x69
 8003d60:	d1f6      	bne.n	8003d50 <_printf_i+0x30>
 8003d62:	6820      	ldr	r0, [r4, #0]
 8003d64:	6813      	ldr	r3, [r2, #0]
 8003d66:	0605      	lsls	r5, r0, #24
 8003d68:	f103 0104 	add.w	r1, r3, #4
 8003d6c:	d52a      	bpl.n	8003dc4 <_printf_i+0xa4>
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6011      	str	r1, [r2, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da03      	bge.n	8003d7e <_printf_i+0x5e>
 8003d76:	222d      	movs	r2, #45	; 0x2d
 8003d78:	425b      	negs	r3, r3
 8003d7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d7e:	486f      	ldr	r0, [pc, #444]	; (8003f3c <_printf_i+0x21c>)
 8003d80:	220a      	movs	r2, #10
 8003d82:	e039      	b.n	8003df8 <_printf_i+0xd8>
 8003d84:	2973      	cmp	r1, #115	; 0x73
 8003d86:	f000 809d 	beq.w	8003ec4 <_printf_i+0x1a4>
 8003d8a:	d808      	bhi.n	8003d9e <_printf_i+0x7e>
 8003d8c:	296f      	cmp	r1, #111	; 0x6f
 8003d8e:	d020      	beq.n	8003dd2 <_printf_i+0xb2>
 8003d90:	2970      	cmp	r1, #112	; 0x70
 8003d92:	d1dd      	bne.n	8003d50 <_printf_i+0x30>
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	f043 0320 	orr.w	r3, r3, #32
 8003d9a:	6023      	str	r3, [r4, #0]
 8003d9c:	e003      	b.n	8003da6 <_printf_i+0x86>
 8003d9e:	2975      	cmp	r1, #117	; 0x75
 8003da0:	d017      	beq.n	8003dd2 <_printf_i+0xb2>
 8003da2:	2978      	cmp	r1, #120	; 0x78
 8003da4:	d1d4      	bne.n	8003d50 <_printf_i+0x30>
 8003da6:	2378      	movs	r3, #120	; 0x78
 8003da8:	4865      	ldr	r0, [pc, #404]	; (8003f40 <_printf_i+0x220>)
 8003daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dae:	e055      	b.n	8003e5c <_printf_i+0x13c>
 8003db0:	6813      	ldr	r3, [r2, #0]
 8003db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db6:	1d19      	adds	r1, r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6011      	str	r1, [r2, #0]
 8003dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e08c      	b.n	8003ede <_printf_i+0x1be>
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dca:	6011      	str	r1, [r2, #0]
 8003dcc:	bf18      	it	ne
 8003dce:	b21b      	sxthne	r3, r3
 8003dd0:	e7cf      	b.n	8003d72 <_printf_i+0x52>
 8003dd2:	6813      	ldr	r3, [r2, #0]
 8003dd4:	6825      	ldr	r5, [r4, #0]
 8003dd6:	1d18      	adds	r0, r3, #4
 8003dd8:	6010      	str	r0, [r2, #0]
 8003dda:	0628      	lsls	r0, r5, #24
 8003ddc:	d501      	bpl.n	8003de2 <_printf_i+0xc2>
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	e002      	b.n	8003de8 <_printf_i+0xc8>
 8003de2:	0668      	lsls	r0, r5, #25
 8003de4:	d5fb      	bpl.n	8003dde <_printf_i+0xbe>
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	296f      	cmp	r1, #111	; 0x6f
 8003dea:	bf14      	ite	ne
 8003dec:	220a      	movne	r2, #10
 8003dee:	2208      	moveq	r2, #8
 8003df0:	4852      	ldr	r0, [pc, #328]	; (8003f3c <_printf_i+0x21c>)
 8003df2:	2100      	movs	r1, #0
 8003df4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003df8:	6865      	ldr	r5, [r4, #4]
 8003dfa:	2d00      	cmp	r5, #0
 8003dfc:	60a5      	str	r5, [r4, #8]
 8003dfe:	f2c0 8095 	blt.w	8003f2c <_printf_i+0x20c>
 8003e02:	6821      	ldr	r1, [r4, #0]
 8003e04:	f021 0104 	bic.w	r1, r1, #4
 8003e08:	6021      	str	r1, [r4, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d13d      	bne.n	8003e8a <_printf_i+0x16a>
 8003e0e:	2d00      	cmp	r5, #0
 8003e10:	f040 808e 	bne.w	8003f30 <_printf_i+0x210>
 8003e14:	4665      	mov	r5, ip
 8003e16:	2a08      	cmp	r2, #8
 8003e18:	d10b      	bne.n	8003e32 <_printf_i+0x112>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	07db      	lsls	r3, r3, #31
 8003e1e:	d508      	bpl.n	8003e32 <_printf_i+0x112>
 8003e20:	6923      	ldr	r3, [r4, #16]
 8003e22:	6862      	ldr	r2, [r4, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	bfde      	ittt	le
 8003e28:	2330      	movle	r3, #48	; 0x30
 8003e2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e32:	ebac 0305 	sub.w	r3, ip, r5
 8003e36:	6123      	str	r3, [r4, #16]
 8003e38:	f8cd 8000 	str.w	r8, [sp]
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	aa03      	add	r2, sp, #12
 8003e40:	4621      	mov	r1, r4
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7ff fef6 	bl	8003c34 <_printf_common>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d14d      	bne.n	8003ee8 <_printf_i+0x1c8>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	b005      	add	sp, #20
 8003e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e56:	4839      	ldr	r0, [pc, #228]	; (8003f3c <_printf_i+0x21c>)
 8003e58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	6821      	ldr	r1, [r4, #0]
 8003e60:	1d1d      	adds	r5, r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6015      	str	r5, [r2, #0]
 8003e66:	060a      	lsls	r2, r1, #24
 8003e68:	d50b      	bpl.n	8003e82 <_printf_i+0x162>
 8003e6a:	07ca      	lsls	r2, r1, #31
 8003e6c:	bf44      	itt	mi
 8003e6e:	f041 0120 	orrmi.w	r1, r1, #32
 8003e72:	6021      	strmi	r1, [r4, #0]
 8003e74:	b91b      	cbnz	r3, 8003e7e <_printf_i+0x15e>
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	f022 0220 	bic.w	r2, r2, #32
 8003e7c:	6022      	str	r2, [r4, #0]
 8003e7e:	2210      	movs	r2, #16
 8003e80:	e7b7      	b.n	8003df2 <_printf_i+0xd2>
 8003e82:	064d      	lsls	r5, r1, #25
 8003e84:	bf48      	it	mi
 8003e86:	b29b      	uxthmi	r3, r3
 8003e88:	e7ef      	b.n	8003e6a <_printf_i+0x14a>
 8003e8a:	4665      	mov	r5, ip
 8003e8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e90:	fb02 3311 	mls	r3, r2, r1, r3
 8003e94:	5cc3      	ldrb	r3, [r0, r3]
 8003e96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	d1f5      	bne.n	8003e8c <_printf_i+0x16c>
 8003ea0:	e7b9      	b.n	8003e16 <_printf_i+0xf6>
 8003ea2:	6813      	ldr	r3, [r2, #0]
 8003ea4:	6825      	ldr	r5, [r4, #0]
 8003ea6:	1d18      	adds	r0, r3, #4
 8003ea8:	6961      	ldr	r1, [r4, #20]
 8003eaa:	6010      	str	r0, [r2, #0]
 8003eac:	0628      	lsls	r0, r5, #24
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	d501      	bpl.n	8003eb6 <_printf_i+0x196>
 8003eb2:	6019      	str	r1, [r3, #0]
 8003eb4:	e002      	b.n	8003ebc <_printf_i+0x19c>
 8003eb6:	066a      	lsls	r2, r5, #25
 8003eb8:	d5fb      	bpl.n	8003eb2 <_printf_i+0x192>
 8003eba:	8019      	strh	r1, [r3, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	4665      	mov	r5, ip
 8003ec0:	6123      	str	r3, [r4, #16]
 8003ec2:	e7b9      	b.n	8003e38 <_printf_i+0x118>
 8003ec4:	6813      	ldr	r3, [r2, #0]
 8003ec6:	1d19      	adds	r1, r3, #4
 8003ec8:	6011      	str	r1, [r2, #0]
 8003eca:	681d      	ldr	r5, [r3, #0]
 8003ecc:	6862      	ldr	r2, [r4, #4]
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	f000 f837 	bl	8003f44 <memchr>
 8003ed6:	b108      	cbz	r0, 8003edc <_printf_i+0x1bc>
 8003ed8:	1b40      	subs	r0, r0, r5
 8003eda:	6060      	str	r0, [r4, #4]
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	6123      	str	r3, [r4, #16]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee6:	e7a7      	b.n	8003e38 <_printf_i+0x118>
 8003ee8:	6923      	ldr	r3, [r4, #16]
 8003eea:	462a      	mov	r2, r5
 8003eec:	4639      	mov	r1, r7
 8003eee:	4630      	mov	r0, r6
 8003ef0:	47c0      	blx	r8
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d0aa      	beq.n	8003e4c <_printf_i+0x12c>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	079b      	lsls	r3, r3, #30
 8003efa:	d413      	bmi.n	8003f24 <_printf_i+0x204>
 8003efc:	68e0      	ldr	r0, [r4, #12]
 8003efe:	9b03      	ldr	r3, [sp, #12]
 8003f00:	4298      	cmp	r0, r3
 8003f02:	bfb8      	it	lt
 8003f04:	4618      	movlt	r0, r3
 8003f06:	e7a3      	b.n	8003e50 <_printf_i+0x130>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	464a      	mov	r2, r9
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	4630      	mov	r0, r6
 8003f10:	47c0      	blx	r8
 8003f12:	3001      	adds	r0, #1
 8003f14:	d09a      	beq.n	8003e4c <_printf_i+0x12c>
 8003f16:	3501      	adds	r5, #1
 8003f18:	68e3      	ldr	r3, [r4, #12]
 8003f1a:	9a03      	ldr	r2, [sp, #12]
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	42ab      	cmp	r3, r5
 8003f20:	dcf2      	bgt.n	8003f08 <_printf_i+0x1e8>
 8003f22:	e7eb      	b.n	8003efc <_printf_i+0x1dc>
 8003f24:	2500      	movs	r5, #0
 8003f26:	f104 0919 	add.w	r9, r4, #25
 8003f2a:	e7f5      	b.n	8003f18 <_printf_i+0x1f8>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ac      	bne.n	8003e8a <_printf_i+0x16a>
 8003f30:	7803      	ldrb	r3, [r0, #0]
 8003f32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f3a:	e76c      	b.n	8003e16 <_printf_i+0xf6>
 8003f3c:	080041f1 	.word	0x080041f1
 8003f40:	08004202 	.word	0x08004202

08003f44 <memchr>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	b2c9      	uxtb	r1, r1
 8003f48:	4402      	add	r2, r0
 8003f4a:	4290      	cmp	r0, r2
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	d101      	bne.n	8003f54 <memchr+0x10>
 8003f50:	2300      	movs	r3, #0
 8003f52:	e003      	b.n	8003f5c <memchr+0x18>
 8003f54:	781c      	ldrb	r4, [r3, #0]
 8003f56:	3001      	adds	r0, #1
 8003f58:	428c      	cmp	r4, r1
 8003f5a:	d1f6      	bne.n	8003f4a <memchr+0x6>
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd10      	pop	{r4, pc}

08003f60 <memcpy>:
 8003f60:	b510      	push	{r4, lr}
 8003f62:	1e43      	subs	r3, r0, #1
 8003f64:	440a      	add	r2, r1
 8003f66:	4291      	cmp	r1, r2
 8003f68:	d100      	bne.n	8003f6c <memcpy+0xc>
 8003f6a:	bd10      	pop	{r4, pc}
 8003f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f74:	e7f7      	b.n	8003f66 <memcpy+0x6>

08003f76 <memmove>:
 8003f76:	4288      	cmp	r0, r1
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	eb01 0302 	add.w	r3, r1, r2
 8003f7e:	d807      	bhi.n	8003f90 <memmove+0x1a>
 8003f80:	1e42      	subs	r2, r0, #1
 8003f82:	4299      	cmp	r1, r3
 8003f84:	d00a      	beq.n	8003f9c <memmove+0x26>
 8003f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003f8e:	e7f8      	b.n	8003f82 <memmove+0xc>
 8003f90:	4283      	cmp	r3, r0
 8003f92:	d9f5      	bls.n	8003f80 <memmove+0xa>
 8003f94:	1881      	adds	r1, r0, r2
 8003f96:	1ad2      	subs	r2, r2, r3
 8003f98:	42d3      	cmn	r3, r2
 8003f9a:	d100      	bne.n	8003f9e <memmove+0x28>
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fa2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003fa6:	e7f7      	b.n	8003f98 <memmove+0x22>

08003fa8 <_free_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	4605      	mov	r5, r0
 8003fac:	2900      	cmp	r1, #0
 8003fae:	d043      	beq.n	8004038 <_free_r+0x90>
 8003fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb4:	1f0c      	subs	r4, r1, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bfb8      	it	lt
 8003fba:	18e4      	addlt	r4, r4, r3
 8003fbc:	f000 f8d0 	bl	8004160 <__malloc_lock>
 8003fc0:	4a1e      	ldr	r2, [pc, #120]	; (800403c <_free_r+0x94>)
 8003fc2:	6813      	ldr	r3, [r2, #0]
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	b933      	cbnz	r3, 8003fd6 <_free_r+0x2e>
 8003fc8:	6063      	str	r3, [r4, #4]
 8003fca:	6014      	str	r4, [r2, #0]
 8003fcc:	4628      	mov	r0, r5
 8003fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fd2:	f000 b8c6 	b.w	8004162 <__malloc_unlock>
 8003fd6:	42a3      	cmp	r3, r4
 8003fd8:	d90b      	bls.n	8003ff2 <_free_r+0x4a>
 8003fda:	6821      	ldr	r1, [r4, #0]
 8003fdc:	1862      	adds	r2, r4, r1
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	bf01      	itttt	eq
 8003fe2:	681a      	ldreq	r2, [r3, #0]
 8003fe4:	685b      	ldreq	r3, [r3, #4]
 8003fe6:	1852      	addeq	r2, r2, r1
 8003fe8:	6022      	streq	r2, [r4, #0]
 8003fea:	6063      	str	r3, [r4, #4]
 8003fec:	6004      	str	r4, [r0, #0]
 8003fee:	e7ed      	b.n	8003fcc <_free_r+0x24>
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	b10a      	cbz	r2, 8003ffa <_free_r+0x52>
 8003ff6:	42a2      	cmp	r2, r4
 8003ff8:	d9fa      	bls.n	8003ff0 <_free_r+0x48>
 8003ffa:	6819      	ldr	r1, [r3, #0]
 8003ffc:	1858      	adds	r0, r3, r1
 8003ffe:	42a0      	cmp	r0, r4
 8004000:	d10b      	bne.n	800401a <_free_r+0x72>
 8004002:	6820      	ldr	r0, [r4, #0]
 8004004:	4401      	add	r1, r0
 8004006:	1858      	adds	r0, r3, r1
 8004008:	4282      	cmp	r2, r0
 800400a:	6019      	str	r1, [r3, #0]
 800400c:	d1de      	bne.n	8003fcc <_free_r+0x24>
 800400e:	6810      	ldr	r0, [r2, #0]
 8004010:	6852      	ldr	r2, [r2, #4]
 8004012:	4401      	add	r1, r0
 8004014:	6019      	str	r1, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	e7d8      	b.n	8003fcc <_free_r+0x24>
 800401a:	d902      	bls.n	8004022 <_free_r+0x7a>
 800401c:	230c      	movs	r3, #12
 800401e:	602b      	str	r3, [r5, #0]
 8004020:	e7d4      	b.n	8003fcc <_free_r+0x24>
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	1821      	adds	r1, r4, r0
 8004026:	428a      	cmp	r2, r1
 8004028:	bf01      	itttt	eq
 800402a:	6811      	ldreq	r1, [r2, #0]
 800402c:	6852      	ldreq	r2, [r2, #4]
 800402e:	1809      	addeq	r1, r1, r0
 8004030:	6021      	streq	r1, [r4, #0]
 8004032:	6062      	str	r2, [r4, #4]
 8004034:	605c      	str	r4, [r3, #4]
 8004036:	e7c9      	b.n	8003fcc <_free_r+0x24>
 8004038:	bd38      	pop	{r3, r4, r5, pc}
 800403a:	bf00      	nop
 800403c:	20000090 	.word	0x20000090

08004040 <_malloc_r>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	1ccd      	adds	r5, r1, #3
 8004044:	f025 0503 	bic.w	r5, r5, #3
 8004048:	3508      	adds	r5, #8
 800404a:	2d0c      	cmp	r5, #12
 800404c:	bf38      	it	cc
 800404e:	250c      	movcc	r5, #12
 8004050:	2d00      	cmp	r5, #0
 8004052:	4606      	mov	r6, r0
 8004054:	db01      	blt.n	800405a <_malloc_r+0x1a>
 8004056:	42a9      	cmp	r1, r5
 8004058:	d903      	bls.n	8004062 <_malloc_r+0x22>
 800405a:	230c      	movs	r3, #12
 800405c:	6033      	str	r3, [r6, #0]
 800405e:	2000      	movs	r0, #0
 8004060:	bd70      	pop	{r4, r5, r6, pc}
 8004062:	f000 f87d 	bl	8004160 <__malloc_lock>
 8004066:	4a21      	ldr	r2, [pc, #132]	; (80040ec <_malloc_r+0xac>)
 8004068:	6814      	ldr	r4, [r2, #0]
 800406a:	4621      	mov	r1, r4
 800406c:	b991      	cbnz	r1, 8004094 <_malloc_r+0x54>
 800406e:	4c20      	ldr	r4, [pc, #128]	; (80040f0 <_malloc_r+0xb0>)
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	b91b      	cbnz	r3, 800407c <_malloc_r+0x3c>
 8004074:	4630      	mov	r0, r6
 8004076:	f000 f863 	bl	8004140 <_sbrk_r>
 800407a:	6020      	str	r0, [r4, #0]
 800407c:	4629      	mov	r1, r5
 800407e:	4630      	mov	r0, r6
 8004080:	f000 f85e 	bl	8004140 <_sbrk_r>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d124      	bne.n	80040d2 <_malloc_r+0x92>
 8004088:	230c      	movs	r3, #12
 800408a:	4630      	mov	r0, r6
 800408c:	6033      	str	r3, [r6, #0]
 800408e:	f000 f868 	bl	8004162 <__malloc_unlock>
 8004092:	e7e4      	b.n	800405e <_malloc_r+0x1e>
 8004094:	680b      	ldr	r3, [r1, #0]
 8004096:	1b5b      	subs	r3, r3, r5
 8004098:	d418      	bmi.n	80040cc <_malloc_r+0x8c>
 800409a:	2b0b      	cmp	r3, #11
 800409c:	d90f      	bls.n	80040be <_malloc_r+0x7e>
 800409e:	600b      	str	r3, [r1, #0]
 80040a0:	18cc      	adds	r4, r1, r3
 80040a2:	50cd      	str	r5, [r1, r3]
 80040a4:	4630      	mov	r0, r6
 80040a6:	f000 f85c 	bl	8004162 <__malloc_unlock>
 80040aa:	f104 000b 	add.w	r0, r4, #11
 80040ae:	1d23      	adds	r3, r4, #4
 80040b0:	f020 0007 	bic.w	r0, r0, #7
 80040b4:	1ac3      	subs	r3, r0, r3
 80040b6:	d0d3      	beq.n	8004060 <_malloc_r+0x20>
 80040b8:	425a      	negs	r2, r3
 80040ba:	50e2      	str	r2, [r4, r3]
 80040bc:	e7d0      	b.n	8004060 <_malloc_r+0x20>
 80040be:	684b      	ldr	r3, [r1, #4]
 80040c0:	428c      	cmp	r4, r1
 80040c2:	bf16      	itet	ne
 80040c4:	6063      	strne	r3, [r4, #4]
 80040c6:	6013      	streq	r3, [r2, #0]
 80040c8:	460c      	movne	r4, r1
 80040ca:	e7eb      	b.n	80040a4 <_malloc_r+0x64>
 80040cc:	460c      	mov	r4, r1
 80040ce:	6849      	ldr	r1, [r1, #4]
 80040d0:	e7cc      	b.n	800406c <_malloc_r+0x2c>
 80040d2:	1cc4      	adds	r4, r0, #3
 80040d4:	f024 0403 	bic.w	r4, r4, #3
 80040d8:	42a0      	cmp	r0, r4
 80040da:	d005      	beq.n	80040e8 <_malloc_r+0xa8>
 80040dc:	1a21      	subs	r1, r4, r0
 80040de:	4630      	mov	r0, r6
 80040e0:	f000 f82e 	bl	8004140 <_sbrk_r>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d0cf      	beq.n	8004088 <_malloc_r+0x48>
 80040e8:	6025      	str	r5, [r4, #0]
 80040ea:	e7db      	b.n	80040a4 <_malloc_r+0x64>
 80040ec:	20000090 	.word	0x20000090
 80040f0:	20000094 	.word	0x20000094

080040f4 <_realloc_r>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	4607      	mov	r7, r0
 80040f8:	4614      	mov	r4, r2
 80040fa:	460e      	mov	r6, r1
 80040fc:	b921      	cbnz	r1, 8004108 <_realloc_r+0x14>
 80040fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004102:	4611      	mov	r1, r2
 8004104:	f7ff bf9c 	b.w	8004040 <_malloc_r>
 8004108:	b922      	cbnz	r2, 8004114 <_realloc_r+0x20>
 800410a:	f7ff ff4d 	bl	8003fa8 <_free_r>
 800410e:	4625      	mov	r5, r4
 8004110:	4628      	mov	r0, r5
 8004112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004114:	f000 f826 	bl	8004164 <_malloc_usable_size_r>
 8004118:	42a0      	cmp	r0, r4
 800411a:	d20f      	bcs.n	800413c <_realloc_r+0x48>
 800411c:	4621      	mov	r1, r4
 800411e:	4638      	mov	r0, r7
 8004120:	f7ff ff8e 	bl	8004040 <_malloc_r>
 8004124:	4605      	mov	r5, r0
 8004126:	2800      	cmp	r0, #0
 8004128:	d0f2      	beq.n	8004110 <_realloc_r+0x1c>
 800412a:	4631      	mov	r1, r6
 800412c:	4622      	mov	r2, r4
 800412e:	f7ff ff17 	bl	8003f60 <memcpy>
 8004132:	4631      	mov	r1, r6
 8004134:	4638      	mov	r0, r7
 8004136:	f7ff ff37 	bl	8003fa8 <_free_r>
 800413a:	e7e9      	b.n	8004110 <_realloc_r+0x1c>
 800413c:	4635      	mov	r5, r6
 800413e:	e7e7      	b.n	8004110 <_realloc_r+0x1c>

08004140 <_sbrk_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	2300      	movs	r3, #0
 8004144:	4c05      	ldr	r4, [pc, #20]	; (800415c <_sbrk_r+0x1c>)
 8004146:	4605      	mov	r5, r0
 8004148:	4608      	mov	r0, r1
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	f7fc fe62 	bl	8000e14 <_sbrk>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_sbrk_r+0x1a>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	b103      	cbz	r3, 800415a <_sbrk_r+0x1a>
 8004158:	602b      	str	r3, [r5, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000154 	.word	0x20000154

08004160 <__malloc_lock>:
 8004160:	4770      	bx	lr

08004162 <__malloc_unlock>:
 8004162:	4770      	bx	lr

08004164 <_malloc_usable_size_r>:
 8004164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004168:	1f18      	subs	r0, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	bfbc      	itt	lt
 800416e:	580b      	ldrlt	r3, [r1, r0]
 8004170:	18c0      	addlt	r0, r0, r3
 8004172:	4770      	bx	lr

08004174 <_init>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	bf00      	nop
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr

08004180 <_fini>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	bf00      	nop
 8004184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004186:	bc08      	pop	{r3}
 8004188:	469e      	mov	lr, r3
 800418a:	4770      	bx	lr
